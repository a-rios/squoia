#
# Rules to solve morphological ambiguity (e.g. es: borracho, de: betrunken/Betrunkener (adj vs noun)
#
# Format:
# source_lemma        target_lemma     k/d     condition            ## comment
#
# condition: if the condition evaluates to true, two actions possible:
# -> k=keep (keep only this option), d=delete  (delete this tranlsation option from output)
# shortnames in conditions:
# my -> this node, parent -> parent node, child -> child node (true if condition is met for at least one child node), 
# rsibling/lsibling -> right/left sibling node (true if condition is met for at least one sibling node to the right/left)
# chunkparent: first ancestor that is a chunk, chunkgrandparent etc.

# IMPORTANT: 
# - if more than one translation option with 'k' for a node evaluates to true, the first one will be used to fill 
#   the attributes of NODE, but the all others that evaluate to true will be kept as SYN nodes!
# - rules are stored in a hash, key is the combination of the source lemma (1st column) and target lemma (2nd column in rules)
#  --> it's not possible to have more than one rule with the same source lemma and the same target lemma!!

#gender related ambiguities
viejo		paya		k	(my.smi=/AQ.F/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]}) || my.smi=/NCF/
viejo		machu		k	(my.smi=/AQ.M/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]})  || my.smi=/NCM/
viejo		mawk'a		k	!( (my.smi=/AQ.F/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]} ) || my.smi=/NCF/) && !((my.smi=/AQ0M/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]})  || my.smi=/NCM/)

anciano		paya		k	(my.smi=/AQ.F/ || xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]} ) || my.smi=/NCF/
anciano		machu		k	(my.smi=/AQ.M/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]})  || my.smi=/NCM/
anciano		yuyaq		k	!(my.smi=/AQ.M/ || xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]}) && !(my.smi=/AQ.F/ || xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]})

#adolescente-> smi=NCC, need to check if head noun is masc/fem or if used as noun, if fem/masc article present
adolescente	t'asqi		k	xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]} || child.smi=/D..F../
adolescente	maqta,wayna,warma		k	xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]}|| child.smi=/D..M../

chico		wayna		k	my.smi=/NCM/
chico		sipas		k	my.smi=/NCF/
chico		huch'uy		k	my.smi=/AQ/

mozo		sipas		k	my.smi=/NCF/
mozo		wayna		k	my.smi=/NCM/

señor		mama		k	my.smi=/NCF/
señor		wiraqucha	k	my.smi=/NCM/

joven		sipas			k	(my.smi=/AQ/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Fem]"]} ) || (my.smi=/NC/ && child.smi=/D..F../) || (my.smi=/AQ/ && parent.si=atr && xpath{parent::CHUNK/parent::CHUNK[NODE[contains(@verbmi,"Copula")]]/CHUNK[@si="suj"]/NODE[@sem="[+Fem]"]} )
joven		maqt'a,wayna		k	(my.smi=/AQ/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@sem="[+Masc]"]} ) || (my.smi=/NC/ && child.smi=/D..M../) || (my.smi=/AQ/ && parent.si=atr && xpath{parent::CHUNK/parent::CHUNK[NODE[contains(@verbmi,"Copula")]]/CHUNK[@si="suj"]/NODE[@sem="[+Masc]"]} )


mozo		sipas		k	my.smi=/NCF/
mozo		wayna		k	my.smi=/NCM/

# fem/masc: warmi, qhari (human), china/urqu (animals)
# leave for language model
#feminino	warmi	k	-
#feminino	china	k	-
#masculino	qhari	k	-
#masculino	urqu	k	-

#gender distinction in kinship terms
#suegro: kaka, suegra: kisma (de hombre), kiwachi (de mujer): proper nouns..?
suegro		kaka		k	my.smi=/NCM/
suegro		kisma		k	my.smi=/NCF/ && xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de" or @slem="del"]]/CHUNK/NODE[starts-with(@smi,"NCM")]}
suegro		kiwachi		k	my.smi=/NCF/ && xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[starts-with(@smi,"NCF")]}

#cuñada: qhachun, cuñado: qatay
cuñado		qhachun		k	my.smi=/NCF/
cuñado		masa		k	my.smi=/NCM/
concuñado	qhachunmasi	k	my.smi=/NCF/
concuñado	qataymasi	k	my.smi=/NCM/

# hermana: ñaña (de mujer), pana (de hombre) / hermano: tura (de mujer), wawqi (de hombre) 
#(lexicon has 2 separate entries for hermana and hermano, so we need to disambiguate only the gender 
# of the refering person here (only possible with de-pp (la hermana del general..)), but not the gender of the sibling (hermana/hermano))

hermano		ñaña	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[starts-with(@smi,"NCF")]}
hermano		pana	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de" or @slem="del"]]/CHUNK/NODE[starts-with(@smi,"NCM")]}

hermano		tura	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[starts-with(@smi,"NCF")]}
hermano		wawqi	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de" or @slem="del"]]/CHUNK/NODE[starts-with(@smi,"NCM")]}

# hija: (warmi) wawa (de mujer), ususi (de hombre) / hijo: (qhari) wawa (de mujer), churi (de hombre) 
#(lexicon has 2 separate entries for hijo and hija, so we don't need disambiguate only the gender 
# of the refering person, but not the gender of the parent (only possible with de-pp (la hija del general..))

hijo		wawa	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[starts-with(@smi,"NCF")]}
hijo		ususi	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de" or @slem="del"]]/CHUNK/NODE[starts-with(@smi,"NCM")]}

hijo		wawa	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[starts-with(@smi,"NCF")]}
hijo		churi	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de" or @slem="del"]]/CHUNK/NODE[starts-with(@smi,"NCM")]}

# other ambiguities

#edad, mita (era), wata (años),TODO: edad de hielo/piedra/etc 
# TODO: add edad_media to lexicon
edad		mit'a	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[@slem="hielo" or @slem="bronce" or @slem="piedra"]} || xpath{following-sibling::CHUNK/NODE[@slem="moderno" or @slem="medio"]}
edad		wata	k	!(xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[@slem="hielo" or @slem="bronce" or @slem="piedra"]} || xpath{following-sibling::CHUNK/NODE[@slem="moderno" or @slem="medio"]})

#falta: hucha (de respeto), pisiy (ausencia), panta (error), estar en falta -> separate entry in lexicon
falta	hucha	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[@slem="respeto"]}
falta	pisiy	k	xpath{following-sibling::CHUNK[@type="grup-sp"][NODE[@slem="de"]]/CHUNK/NODE[not(@slem="respeto")]}
falta	panta	k	my.smi=/^NC/ && (child.smi=/^DP/ || xpath{descendant::NODE[starts-with(@smi,"PX")]}) && !(xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]})


# propietario, kaqniyuq, but with sp-de: propietario de algo-> algoyuq
propietario	+Poss		k	xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]}
propietario	kaqniyuq	k	!(xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]})

# dueño
dueño	unspecified	k		!(xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]})
dueño	+Poss		k		xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]}

#rico (dinero, poder): qhapaq, (comida) miski
rico		qhapaq		k	!(xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="estar"]} || child.slem=qué )
rico		miski		k	xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="estar"]} || child.slem=qué


   ##########
   # VEBRS  #
   ##########
   
# acordar: yuyari- (recordar) or kamachinaku- (llegar a un acuerdo)
# if with reflexive + de-obj: yuyari, with direct object: kamachinaku
acordar		yuya	k	xpath{parent::CHUNK/CHUNK[@type="grup-sp" or @type="coor-sp"]/NODE[@slem="de"]} || xpath{parent::CHUNK/CHUNK/NODE[@slem="se" or @slem="me" or @slem="te" or @slem="nos" or @slem="vos"]}
acordar		kama	k	xpath{following-sibling::CHUNK[(@type="sn" or @type="coor-n") and (@si="cd" or @si="cd-a")]/NODE[starts-with(@smi,"N")]}


#deber deuda/algo -> manuka-, deber hacer algo -> obligative
deber	manuka		k	!(xpath{parent::NODE[starts-with(@smi,"V")]})
deber	+Obl		k	xpath{parent::NODE[starts-with(@smi,"V")]}

# encontrar -> without reflexive: tari- (encontrar algo)
# encontrarse con -> tinkuy, encontrarse en or nothing: can be both kay (location)/tinkuy (meeting)
encontrar		tari	d	xpath{parent::CHUNK/descendant::CHUNK/NODE[@slem="se" or @slem="me" or @slem="te" or @slem="nos" or @slem="vos"]}
encontrar		ka	d	xpath{parent::CHUNK/descendant::CHUNK/NODE[@slem="se" or @slem="me" or @slem="te" or @slem="nos" or @slem="vos"]} && xpath{parent::CHUNK/child::CHUNK/NODE[@slem="con"]}
encontrar		tinku	k	xpath{parent::CHUNK/descendant::CHUNK/NODE[@slem="se" or @slem="me" or @slem="te" or @slem="nos" or @slem="vos"]} && xpath{parent::CHUNK/child::CHUNK/NODE[@slem="con"]}

# enfrentar: enfrentarse con/contra -> maqanakuy -wan
# otherwise: either churakuy or uyanchay

enfrentar 		maqa		k	xpath{parent::CHUNK/CHUNK/NODE[@slem="se"]} && xpath{parent::CHUNK/CHUNK[@type="grup-sp"]/NODE[@slem="contra" or @slem="con"]}
enfrentar		chura,uyancha	k	!(xpath{parent::CHUNK/CHUNK/NODE[@slem="se"]} && xpath{parent::CHUNK/CHUNK[@type="grup-sp"]/NODE[@slem="contra" or @slem="con"]})


# fingir algo -> tukuy, fingir +inf/gerund -> -ykacha
fingir		tuku		d	xpath{parent::NODE[starts-with(@smi, "VMG") or starts-with(@smi, "VMN") or starts-with(@smi, "VSG") or starts-with(@smi, "VSN") ]}
fingir		++Intrup	d	!(xpath{parent::NODE[starts-with(@smi, "VMG") or starts-with(@smi, "VMN") or starts-with(@smi, "VSG") or starts-with(@smi, "VSN") ]})


# incitar + noun -> raykuy , incitar a + inf: ++Caus
incitar		rayku		d		xpath{descendant::NODE[@slem="a"]} && xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN")]}
incitar		++Caus		d		!(xpath{descendant::NODE[@slem="a"]} && xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN")]} ) 

# instigar + noun -> raykuy , instigar a + inf: ++Caus
instigar		rayku		d		xpath{descendant::NODE[@slem="a"]} && xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN")]}
instigar		++Caus		d		!(xpath{descendant::NODE[@slem="a"]} && xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN")]} ) 

permanecer	ka		d	xpath{parent::NODE[starts-with(@smi, "VMG")]}
permanecer	++Perdur	d	!(xpath{parent::NODE[starts-with(@smi, "VMG")]})	

# personar con alguien (reunirse para tratar algo): huñunakuy, if prep. arg. 'con' vs. 'kikin kay' otherwise
personar	huñu		k		xpath{ancestor::CHUNK[1]/CHUNK/NODE[@slem="con"]}
personar	rikhu		k		!(xpath{ancestor::CHUNK[1]/CHUNK/NODE[@slem="con"]})

seguir		qati		d	xpath{parent::NODE[starts-with(@smi, "VMG")]}
seguir		++Perdur	d	!(xpath{parent::NODE[starts-with(@smi, "VMG")]})

# volver: tukuy/kutiy -> default, ++Autotrs -> with adjective + se (volverse rojo: pukayay), volver a + noun -> kutiy, volver a +infinitive -> ++Rep
volver		++Autotrs	k	xpath{ancestor::CHUNK[1]/child::CHUNK[@si="cpred"]/NODE[starts-with(@smi, "AQ")] } && xpath{ancestor::CHUNK[1]/child::CHUNK/NODE[@slem="se"]}
volver		++Rep		k	xpath{parent::NODE[@mi="infinitive"]/descendant::NODE[@slem="a"] }


#### HACER/PERMITIR; causative ######

# hacer algo: ruray, hacerse +np (hacerse el tonto = fingir): tukuy, hacer+infinitive: -chi (causative)
# note: hacer/hacerse will be disambiguated in morphSelection (transitivity=rflx vs. transitivity=trans)
hacer		rura,tuku	d	xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN") ]}
hacer		++Caus		d	!(xpath{parent::NODE[starts-with(@smi, "VMN") or starts-with(@smi, "VSN") ]})

permitir		++Caus	k	xpath{parent::NODE[@mi="infinitive"]}
permitir		huñi	k	!(xpath{parent::NODE[@mi="infinitive"]})

##### TENER ######

# tener años
tener	ka	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="año"]} || xpath{parent::NODE[@slem="año"]}

# tener enemistad
tener	awqa	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="enemistad"]}

# tener flojera, pereza
tener	qilla	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="flojera" or @slem="pereza"]}

# tener hambre
tener	mikhunaya	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="hambre"]}

# tener hipo
tener	hik'i	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="hipo"]}

# tener miedo
tener	mancha	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="miedo"]}


# tener pareja
tener	yanacha		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="pareja"]}

# tener pena
tener	llaki	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="pena"]}

# tener sed
tener	ununaya		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="sed"]}

# tener sueño
tener	puñunaya	k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="sueño"]}

# tener vergüenza
tener	p'inqa		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="vergüenza"]}

# tener compasión
tener	khuya		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="compasión" or @slem="piedad"]}

# tener fragancia,olor
tener	q'apa		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="fragancia" or @slem="olor"]}

# tener fé
tener	iñi		k	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="fé"]}


# tener: default, use tene-
tener	unspecified	k	!(xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/NODE[@slem="fragancia" or @slem="olor" or @slem="compasión" or @slem="piedad" or @slem="vergüenza" or @slem="sueño" or @slem="sed" or @slem="pena" or @slem="pareja" or @slem="miedo" or @slem="hipo" or @slem="hambre" or @slem="flojera" or @slem="pereza" or @slem="enemistad" or @slem="año" or @slem="fé"]})


  #####################
  # PERSONAL PRONOUNS #
  #####################
  
# usted/ustedes
usted	qam		k	my.sform=usted
usted	qamkuna		k	my.sform=ustedes

# personal pronoun 1.Pl -> if verb is 2 pers: must be 1.pl.excl
# -> 2 > 1.pl cannot be inclusive
# nosotros/as (nos is disambiguated in morphSelection.rules)
nosotros	ñuqayku		k	xpath{../ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/child::CHUNK[contains(@si,"cd")]/NODE[contains(@mi,"++2")]} 
