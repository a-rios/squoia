# 1			2				3					4			5		6
# descendantCond	descendantAttr			ancestorCond				ancestorAttr		direction	writeMode
# move all the information that is relevant for the syntactic and morphological generation from the nodes to their chunks

    ###########
    # GRUP-SP #
    ###########

# copy attribute 'func' (function) up to the chunk 
# -> e.g. preposition 'de' might have func=attributive in 
# 'casa de piedra' -> noun in 'de' pp functions as adjective in quz:
# -> 'rumi wasi' -> not 'rumimanta wasi'
my.func=/.+/ && my.adpos=/.+/		func				my.type=/grup-sp|coor-sp/		func			up		concat

# preform (e.g. mana) that has printed first in chunk
# NOTE: not really prepositions, just something that needs to appear to the left of the noun
my.prepos=/.+/				prepos				my.type=/grup-sp|coor-sp/		prepos			up		concat

    ##############
    # DETRMINERS #
    ##############
    
# delete plural suffix in demonstrative or indefinite pronouns if head is a number
my.smi=/^DD/ && my.mi=/\+Pl/			"+Pl"			my.type=det				deleteMorph		up		concat

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

    #########
    # NOUNS #
    #########

# copy attribute 'case' to chunk (sn or grup-sp)
my.case=/.+/				case				my.type=/.+/ && !(my.type=/grup-verb|coor-v/)				case			up		concat

# copy attribute nouncase, if present, from original preposition to chunk and from there to the noun in the preposition chunk
my.nouncase=/.+/			nouncase		my.type=/grup-sp|coor-sp/		nouncase		up		concat
my.spform=/.+/ && my.smi=/^SP/		spform			my.type=/grup-sp|coor-sp/		spform			up		concat

# copy possessive suffixes to noun chunk
my.mi=/\+\+.+Poss/		mi			my.type=/sn|coor-n/			poss			up		concat

# copy func=attribute to the chunk level (e.g. of originally Spanish adjectives) for later reordering
my.func=attributive			func		my.type=/sa|coor-sa/				func					up			concat

# if sn chunk with 3rd person clitic (le,lo,la)
# -> set delete=yes in sn-chunk
# TODO: always delete le,lo,la? or only if 'double' (lo he visto a Juan)?
my.slem=lo || my.slem=le		"yes"				my.type=/sn|coor-n/		delete		up		overwrite

# delete personal pronouns with ++Obj in chunk (redundant)
my.mi=/\+\+.+Obj/		"yes"			my.type=/sn|coor-n/		delete		up		overwrite

# if sn chunk with 'se' -> set delete=yes for this node
my.slem=se				"yes"				my.type=/sn|coor-n/		delete		up		overwrite

# if sn chunk and si=cd -> set mi=+Acc (also for cd/ci and cd-a, TODO: better Acc as default or Dat?)
parent.type=sn					"+Acc"				my.si=/cd/					case			up		concat

# if sn chunk and si=ci -> set mi=+Dat
parent.type=sn					"+Dat"				my.si=ci					case			up		concat

# if plural noun with a child node that is a number: delete plural suffix (kimsa runa, not *kimsa runakuna)
my.smi=/^DN|^Z$/				"+Pl"				my.type=/sn|coor-n/				deleteMorph		up		concat

# if case is +Abss (-nnaq) -> delete Pluralsuffix
# -> sin dientes -> kirunnaq, not kirukunannaq !
my.smi=/^N/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@case="+Abss"]}		"+Pl"			my.type=/sn|coor-n/		deleteMorph	up	concat

# propietario de algo -> algo-yuq
# copy ++Poss from propietario to sn chunk, and from there (over child grup-sp) to the possessed noun
# and then delete genitive from the pp chunk ('de') in between
my.slem=/propietario|dueño/ && xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]} && my.moveToHead_mi=/.+/		moveToHead_mi			my.type=/.+/		chunkmi		up	concat
my.slem=/propietario|dueño/ && xpath{following-sibling::CHUNK[@type="grup-sp"]/NODE[@slem="de"]}					"yes"				my.type=/.+/		delete		up	concat
my.slem=de && xpath{parent::CHUNK/parent::CHUNK[@chunkmi="++Poss"]/NODE[@slem="propietario" or @slem="dueño"]}				"none"				my.type=/grup-sp|coor-sp/	case		up	overwrite


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
    #########
    # VERBS #
    #########

# morphological information inserted during transfer that is needed by all synonyms for generation goes to addverbmi, all information that is needed only by primary node goes to verbmi! 
    
# copy attribute 'verbmi' to next first ancestor verb chunk: finite verbs
my.verbmi=/.+/ && my.smi=/1|2|3/ && !(my.slem=/^ir$|marchar/ && my.mi=imperative && my.smi=/1P/ ) && !(my.slem=tener && rsibling.slem=que) && !(my.slem=deber) && ( !(xpath{ancestor::NODE[@mi="infinitive"]}) || ( xpath{ancestor::NODE[@mi="infinitive"]} && my.slem=/poner|empezar|llegar|comenzar|ir/ ) || (child.slem=/empezar|poner|ir|llegar|comenzar/ && xpath{ancestor::NODE[@mi="infinitive"]} ) )  && ( my.slem=estar || !(xpath{ancestor::NODE[@smi="VMG0000"]})) 		verbmi				my.type=/grup-verb|coor-v/		verbmi			up		concat

# copy lemma and morphology of auxiliary to head chunk (only relevant with habitual past forms)
my.auxlem=/.+/				auxlem				my.type=/grup-verb|coor-v/		auxlem			up	overwrite
my.auxverbmi=/.+/			auxverbmi			my.type=/grup-verb|coor-v/		auxverbmi		up	overwrite

#---------------------------------------------
# COMPLEMENT CLAUSES
# special case: modal verbs with infinitive complement (quiero/puedo hacer)
# main verb: infinitive +Acc, main verb: finite
# sometimes: all in one chunk (if parser labeled modal verb with rel="v")
# sometimes: modalverb in own chunk (when parser labeled infinitive correctly as 'cd')
# also:
# subordinated participle -> subieron ascendiendo, se fue riendo, entra flotando, etc.
# -> finite verb: verbmi2, lem2; gerund: lem, verbmi (+SS)
my.verbmi=/.+/ && my.smi=/1|2|3/ && !(my.slem=tener && rsibling.slem=que) && !(my.slem=ir && parent.smi=VMN0000) && !(my.slem=deber) && !(xpath{self::NODE[starts-with(@smi,"VA")]}) && (xpath{ancestor::NODE[@mi="infinitive"]} || ( xpath{ancestor::NODE[@smi="VMG0000"]} && !(my.slem=estar) ) ) && !(my.slem=/poner|llegar|empezar|comenzar|soler/) 				verbmi				my.type=/grup-verb|coor-v/		verbmi2			up		concat
my.verbmi=/.+/ && my.smi=/1|2|3/ && !(my.slem=tener && rsibling.slem=que) && !(my.slem=ir && parent.smi=VMN0000) && !(my.slem=deber) && !(my.smi=/^VA/) && (parent.mi=infinitive || (xpath{ancestor::NODE[@mi="infinitive"]} && !(my.slem=estar) ) ) && !(my.slem=/poner|llegar|empezar|llegar|comenzar/) && !(my.lem=unspecified)							lem				my.type=/grup-verb|coor-v/		lem2			up		concat
my.verbmi=/.+/ && my.smi=/1|2|3/ && !(my.slem=tener && rsibling.slem=que) && !(my.slem=ir && parent.smi=VMN0000) && !(my.slem=deber) && xpath{ancestor::NODE[@mi="infinitive"]} && !(my.smi=/^VA/)  && !(my.slem=/poner|empezar|ir|comenzar|llegar|soler/) 				"+Inf+Acc"			my.type=/grup-verb|coor-v/		addverbmi		up		concat

# llegar/empezar/poner(se)/comenzar a +Inf:
# lem = lem of infinitive, verbmi = mi of finite verb +Inch
my.slem=/poner|llegar|comenzar|empezar/ && my.smi=/1|2|3/ && parent.mi=infinitive && my.verbmi=/.+/ 				verbmi		my.type=/grup-verb|coor-v/			verbmi			up	concat
my.slem=/poner|llegar|comenzar|empezar/ && xpath{ancestor::NODE[@mi="infinitive"]}	"+Inch"		my.type=/grup-verb|coor-v/			verbmi			up	concat

# if infinitive in own chunk, add +Inf and +Acc to morphology
xpath{self::NODE[@mi="infinitive" or (@smi="VMN0000" and @mi="agentive")]} && !(xpath{following-sibling::NODE}) && !(xpath{descendant::NODE[starts-with(@smi,"V")]})  && parent.si=cd 			"+Acc"			my.type=/grup-verb|coor-v/ && !(my.verbform=main)			chunkmi		up		concat
#---------------------------------------------

#---------------------------------------------
# NON-FINITE CHUNKS:
# Infinitive:
# if verb chunk with only infinitive: copy verbmi to chunk
# note: in passive verb chunks, infinitive might not be top node in chunk! check for ancestor nodes too
my.mi=/infinitive|SS|obligative|agentive/ && !(xpath{following-sibling::NODE})  && !(xpath{descendant::NODE[starts-with(@smi,"V")]}) && my.verbmi=/.+/ 			verbmi				my.type=/grup-verb|coor-v/ && !(xpath{self::CHUNK/NODE[count(descendant-or-self::NODE[starts-with(@smi,"V")])>1]}) 				verbmi			up		concat

# Gerunds:
# copy mi from gerund to verbmi of chunk
my.smi=/VMG0000|VSG0000/ && !(xpath{descendant::NODE[@slem="estar" or @slem="seguir" or @slem="continuar" or @slem="comenzar" ]})  					mi				my.type=/grup-verb|coor-v/			addverbmi			up		concat
#----------------------------------------------

#----------------------------------------------
# HABER DE + INFINITIVE (has de pensarlo bien)
# -> write "+Obl" to verbmi (tense of haber needs to be copied to auxlem and auxverbmi, but pers is always 3.Sg)
# -> write subj person from haber as possessive suffix to verbmi
my.mi=infinitive && xpath{descendant::NODE[@slem="haber"]} && xpath{descendant::NODE[@slem="de"]}				"+Obl"			my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="de"]} && xpath{descendant::NODE[@slem="haber"]} 				"ka"			my.type=/grup-verb|coor-v/		auxlem		up		concat
xpath{descendant::NODE[@slem="de"]} && my.mi=infinitive && xpath{descendant::NODE[@slem="haber"]} 				"+3.Sg.Subj"		my.type=/grup-verb|coor-v/		auxverbmi	up		concat

my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@verbmi,"Fut")]} && xpath{descendant::NODE[@slem="de"]}	"+Fut"			my.type=/grup-verb|coor-v/		auxverbmi	up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@verbmi,"Pot")]} && xpath{descendant::NODE[@slem="de"]}	"+Pot"			my.type=/grup-verb|coor-v/		auxverbmi	up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@verbmi,"NPst")]} && xpath{descendant::NODE[@slem="de"]}	"+NPst"			my.type=/grup-verb|coor-v/		auxverbmi	up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@verbmi,"IPst")]} && xpath{descendant::NODE[@slem="de"]}	"+IPst"			my.type=/grup-verb|coor-v/		auxverbmi	up		concat

my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"1S")]} && xpath{descendant::NODE[@slem="de"]}	"+1.Sg.Poss"		my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"1P")]} && xpath{descendant::NODE[@slem="de"]}	"+1.Pl.Incl.Poss"	my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"2S")]} && xpath{descendant::NODE[@slem="de"]}	"+2.Sg.Poss"		my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"2P")]} && xpath{descendant::NODE[@slem="de"]}	"+2.Pl.Poss"		my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"3S")]} && xpath{descendant::NODE[@slem="de"]}	"+3.Sg.Poss"		my.type=/grup-verb|coor-v/		verbmi		up		concat
my.mi=infinitive && xpath{descendant::NODE[@slem="haber" and contains(@smi,"3P")]} && xpath{descendant::NODE[@slem="de"]}	"+3.Pl.Poss"		my.type=/grup-verb|coor-v/		verbmi		up		concat
#-------------------------------------------------

#-------------------------------------------------
# IR A + INFINITIVE
# copy attribute 'verbmi' from 'ir' (if finite) to verbmi in chunk
# and insert +Fut in verbmi of chunk
my.verbmi=/.+/ && my.smi=/1|2|3/ && my.slem=ir && parent.smi=VMN0000		verbmi			my.type=/grup-verb|coor-v/		verbmi		up	concat
my.slem=ir && parent.smi=VMN0000		"+Fut"				my.type=/grup-verb|coor-v/			addverbmi			up 		concat
#-------------------------------------------------

#-------------------------------------------------
# FINITE VERB UNKNOWN
# if finite verb is unknown in complex verb chunk, copy verbmi of (non-finite) main verb
my.verbmi=/.+/ && xpath{self::NODE[@smi="VMN0000" or starts-with(@smi,"VMP")]/NODE[@unknown="transfer" and starts-with(@smi,"V")]} 		verbmi			my.type=/grup-verb|coor-v/	addverbmi		up	concat
#-------------------------------------------------

#-------------------------------------------------
# OBJECT CLITICS
# copy all the object clitics for 1st and 2nd persons to the sn chunk (and from there to the verb chunk)
my.mi=/\+\+.+Obj|\+\+Rflx/	mi			my.type=/sn|coor-n/			addverbmi			up		concat
#-------------------------------------------------

# copy lemma of the main verb (first node child in verbchunk) to the verb chunk (needed for generation)
# except with 1.Pl imperative of ir/marchar -> irregular form 'haku'
my.smi=/^V/ && !(xpath{ancestor::NODE[starts-with(@smi,"V")]}) && !(my.lem=unspecified || my.unknown=transfer) && !(my.slem=/^ir$|marchar/ && my.mi=imperative && my.smi=/1P/ )		lem			my.type=/grup-verb|coor-v/		lem			up		concat
my.smi=/^V/ && !(xpath{ancestor::NODE[starts-with(@smi,"V")]}) && (my.lem=unspecified || my.unknown=transfer)		slem			my.type=/grup-verb|coor-v/		lem			up		concat

# copy all information from add_mi in verbs to verbmi (concat)
my.add_mi=/.+/ && my.smi=/^VM/			add_mi				my.type=/grup-verb|coor-v/			verbmi				up		concat

# in verb chunks with verbform=ambiguous that contain a relative pronoun, all but obligative, perfect and agentive SYN nodes have been deleted
# -> set verbform=rel
my.smi=/^V/ && xpath{child::NODE[starts-with(@smi,"PR") or NODE[starts-with(@smi,"PR") ]]}		"rel:"		my.type=/grup-verb|coor-v/ && my.verbform=ambiguous		verbform	up	overwrite

# relative clauses with 'donde' -> add Locative suffix
# wrong -> translate as IHRC, see below
# la casa donde vivía -> kawsasqaypi wasi
#my.slem=donde && my.smi=/^PR/				"+Loc"			my.verbform=/^rel:/				addverbmi			up		concat

# set 3.Sg of copula (kan) to be deleted
my.lem=ka && my.verbmi=/Copula\+3\.Sg\.Subj/ && my.mi=present 				"yes"			my.type=/grup-verb|coor-v/ && my.lem=ka			delete		up		overwrite

# special case: imperative 1.pl of 'ir/marchar' -> irregular form 'haku'
my.slem=/^ir$|marchar/ && my.mi=imperative && my.smi=/VMM01P0|VMSP1P0/	"haku"		my.type=/grup-verb|coor-v/	lem		up	overwrite
my.mi=imperative && my.slem=/^ir$|marchar/ && my.smi=/VMM01P0|VMSP1P0/	""		my.type=/grup-verb|coor-v/	verbmi		up	overwrite
my.mi=imperative && my.smi=/VMM01P0|VMSP1P0/ && my.slem=/^ir$|marchar/ 	""		my.type=/grup-verb|coor-v/	addverbmi	up	overwrite

# continuar + gerund: add +Perdur to verbmi
my.slem=continuar && xpath{ancestor::NODE[starts-with(@smi,"VSG") or starts-with(@smi,"VMG") or starts-with(@smi,"VAG")]}	"+Perdur"		my.type=/grup-verb|coor-v/		addverbmi		up		concat

#------------------------------------------------------------
# IHRC: INTERNALLY HEADED RELATIVE CLAUSES
# subject of a relative clause with IHRC=yes (internally headed relative clause)
# -> add possessive suffix of subject person to (nominal) verbform if the rel.clause is not.agentive
# also: -> add genitive suffix to subject (in STinterchunk.rules!)
my.verbmi=/.+/ && my.smi=/1S/		"+1.Sg.Poss				my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
my.verbmi=/.+/ && my.smi=/1P/		"+1.Incl.Pl.Poss			my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
#my.verbmi=/.+/ && my.smi=/1P/		"+1.Excl.Pl.Poss			my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
my.verbmi=/.+/ && my.smi=/2S/		"+2.Sg.Poss				my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
my.verbmi=/.+/ && my.smi=/2P/		"+2.Pl.Poss				my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
my.verbmi=/.+/ && my.smi=/3S/		"+3.Sg.Poss				my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
my.verbmi=/.+/ && my.smi=/3P/		"+3.Pl.Poss				my.IHRC=yes && my.verbform=rel:not.agentive		verbmi		up		concat
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

    ###########################
    # CLAUSE LEVEL MORPHOLOGY #
    ###########################

# copy all information from certain nodes to their head
# -> either the chunk and from there to the head chunk (if node has its own chunk)
# -> or just to the head chunk (if node does not have its own chunk)
my.smi=RN					+Neg				my.type=/sadv/					chunkmi			up		concat

# coordination: if coordinated nouns: -wan (or better -pas? TODO), if coordinated clauses: -taq
my.slem=e || my.slem=y				"+Instr"			my.type=/sn|coor-n/				chunkmi			up		concat
my.slem=e || my.slem=y				"+Intr"				my.type=/grup-verb|coor-v/			chunkmi			up		concat

my.slem=/tal_vez|quizás|posiblemente/		"+Asmp"				my.type=/.+/					chunkmi			up		concat
my.slem=/también/				"++Add"				my.type=/.+/					chunkmi			up		concat
my.slem=también 				"yes"				my.type=/.+/					delete			up		concat

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

    #######################
    # SPECIAL CASE: TENER #
    #######################

# tener que hacer algo / deber hacer algo -> ruwana+possessive kan -> extract person information from finite verb and copy that to the attribute verbmi of the verb chunk and write form of KAN to the chunk for generation
# NOTE: do not add lem2 and verbmi2 if this is a complement or relative clause, in these cases, only nominal form of main verb is needed
# alternatives marked with '#'
# rules I:
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/1S/	"+Obl+1.Sg.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/1P/	"#+1.Pl.Incl.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/1P/	"#+1.Pl.Excl.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/2S/	"+Obl+2.Sg.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/2P/	"+Obl+2.Pl.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/3S/	"+Obl+3.Sg.Poss"			my.type=/grup-verb/			verbmi			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/3P/	"+Obl+3.Pl.Poss"			my.type=/grup-verb/			verbmi			up		concat

# rules II:
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]}		 	"ka"				my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			lem2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...P/	"+3.Sg.Subj"			my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...F/	"+3.Sg.Subj.Fut"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...I/	"#+NPst+3.Sg.Subj"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...I/	"#+IPst+3.Sg.Subj"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...S/	"#+NPst+3.Sg.Subj"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...S/	"#+IPst+3.Sg.Subj"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat
my.slem=/tener|deber/ && xpath{ancestor::CHUNK[1]/child::NODE[@smi="VMN0000" or @smi="VSN0000"]} && my.smi=/...C/	"+3.Sg.Subj+Pot"		my.type=/grup-verb/ && !(my.si=cd) && !(my.verbform=/rel:/)			verbmi2			up		concat


## forms of tener hambre, tener hipo etc: in Quechua, one root, delete object####
my.slem=hipo && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="hik'i" and @slem="tener"]}			"yes"	my.si=/cd/	delete		up	overwrite
my.slem=/flojera|pereza/ && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="qilla" and @slem="tener"]}	"yes"	my.si=/cd/	delete		up	overwrite
my.slem=enemistad && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="awqa" and @slem="tener"]}		"yes"	my.si=/cd/	delete		up	overwrite
my.slem=miedo && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="mancha" and @slem="tener"]}			"yes"	my.si=/cd/	delete		up	overwrite
my.slem=pareja && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="yanacha" and @slem="tener"]}		"yes"	my.si=/cd/	delete		up	overwrite
my.slem=pena && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="llaki" and @slem="tener"]}			"yes"	my.si=/cd/	delete		up	overwrite
my.slem=vergüenza && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="vergüenza" and @slem="tener"]}		"yes"	my.si=/cd/	delete		up	overwrite
my.slem=/compasión|piedad/ && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="khuya" and @slem="tener"]}	"yes"	my.si=/cd/	delete		up	overwrite
my.slem=/fragancia|olor/ && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="q'apa" and @slem="tener"]}	"yes"	my.si=/cd/	delete		up	overwrite
my.slem=hambre && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="mikhunaya" and @slem="tener"]}			"yes"	my.si=/cd/	delete		up	overwrite
my.slem=sed && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="ununaya" and @slem="tener"]}			"yes"	my.si=/cd/	delete		up	overwrite
my.slem=sueño && xpath{parent::CHUNK/parent::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@lem="puñunaya" and @slem="tener"]}		"yes"	my.si=/cd/	delete		up	overwrite


## special case, forms with -naya: make Subj -> Obj (tengo hambre -> yarqanayaWAn)
xpath{self::NODE[@lem="mikhunaya" and @slem="tener"]}		"yes"	my.type=/grup-verb|coor-v/	subjToObj	up	overwrite
xpath{self::NODE[@lem="ununaya" and @slem="tener"]}		"yes"	my.type=/grup-verb|coor-v/	subjToObj	up	overwrite
xpath{self::NODE[@lem="puñunaya" and @slem="tener"]}		"yes"	my.type=/grup-verb|coor-v/	subjToObj	up	overwrite

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

    ##############################
    # SPECIAL CASE: ACORDARSE DE #
    ##############################

# acordarse [de alguien] -> []-ta yuyarikuy -> with 1st/2nd person, add Obj to verb 
# me acuerdo de ti -> qamta yuyarisayki
# TODO: any difference here between 1.Pl.Incl vs. Excl?
# any difference between 2 Sg vs. Pl?
my.smi=/^PP1.S/ && chunkgrandparent.case=+Acc && xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@slem="acordar"]}		"++1.Sg.Obj"			my.type=/sn|coor-n/		verbmi		up	concat
my.smi=/^PP2.S/ && chunkgrandparent.case=+Acc && xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@slem="acordar"]}		"++2.Sg.Obj"			my.type=/sn|coor-n/		verbmi		up	concat


  # Negation
my.slem=no			"+Neg"				my.type=sadv					deleteMorph		up 		concat



    #################################
    # POSSESSOR on relational nouns #
    #################################
    
# concern nouns like llapa -n/-nku, sapa -y/yki/n etc.    


# 1.Sg:
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="yo"]} || xpath{ancestor::CHUNK[contains(@verbmi,"1.Sg.Subj") or contains(@verbmi2,"1.Sg.Subj")]} )				add_mi		my.type=/.+/		"1.Sg.Poss"	down	overwrite
# 1.Pl (preliminary solution: incl/excl not disambiguated yet!!):
#my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="nosotros"]} || xpath{ancestor::CHUNK[contains(@verbmi,"1.Pl.Excl.Subj") or contains(@verbmi2,"1.Pl.Excl.Subj")]} ||  xpath{ancestor::CHUNK[contains(@verbmi,"1.Pl.Incl.Subj") or contains(@verbmi2,"1.Pl.Incl.Subj")]} )		add_mi		my.type=/.+/		"1.Pl.Excl.Poss#1.Pl.Incl.Poss"	down	overwrite
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="nosotros"]} || xpath{ancestor::CHUNK[contains(@verbmi,"1.Pl.Excl.Subj") or contains(@verbmi2,"1.Pl.Excl.Subj")]} )		add_mi		my.type=/.+/		"1.Pl.Excl.Poss"	down	overwrite
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="nosotros"]} || xpath{ancestor::CHUNK[contains(@verbmi,"1.Pl.Incl.Subj") or contains(@verbmi2,"1.Pl.Incl.Subj")]} )		add_mi		my.type=/.+/		"1.Pl.Incl.Poss"	down	overwrite

#2.Sg:
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="tú"]} || xpath{ancestor::CHUNK[contains(@verbmi,"2.Sg.Subj") or contains(@verbmi2,"2.Sg.Subj")]} )				add_mi		my.type=/.+/		"2.Sg.Poss"	down	overwrite
# 2.Pl:
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="vosotros" or @sform="ustedes"]} || xpath{ancestor::CHUNK[contains(@verbmi,"2.Pl.Subj") or contains(@verbmi2,"2.Pl.Subj")]} )			add_mi		my.type=/.+/		"2.Pl.Poss"	down	overwrite

#3.Pl:
my.add_mi=/\-\-Poss/ && ( xpath{ancestor::CHUNK[@type="sn"]/NODE[@slem="ellos" ]} || xpath{ancestor::CHUNK[contains(@verbmi,"3.Pl.Subj") or contains(@verbmi2,"3.Pl.Subj")]} )			add_mi		my.type=/.+/		"3.Pl.Poss"	down	overwrite

#default: 3.Sg.Poss (-n)
my.add_mi=/\-\-Poss/ && ( !(xpath{ancestor::CHUNK[@type="sn"]/NODE[starts-with(@smi,"PP1") or starts-with(@smi,"PP2") or @lem="paykuna"]}) && !(xpath{ancestor::CHUNK[contains(@verbmi,"1.Sg.Subj") or contains(@verbmi,"1.Pl.Incl.Subj") or contains(@verbmi,"1.Pl.Excl.Subj") or contains(@verbmi2,"2.Sg.Subj") or contains(@verbmi,"2.Pl.Subj") or contains(@verbmi2,"3.Pl") ]}) )			add_mi		my.type=/.+/		"3.Sg.Poss"	down	overwrite


    ######################################################################
    # SPECIAL CASES: spanish words that are realized as quechua suffixes #
    ######################################################################

my.slem=/incluso|sólo/ && my.mi=/^\+\+/		mi			my.type=/.+/		chunkmi		up	concat
my.mi=/^\+\+/ && my.slem=/incluso|sólo/ 	"yes"			my.type=/.+/		delete		up	concat
# permanecer