#
# Rules to solve morphological ambiguity (e.g. es: borracho, de: betrunken/Betrunkener (adj vs noun)
#
# Format:
# nodeSRC        morphTRGT(no explicit feature -> assumed mi, other target than mi -> indicate explicitely (e.g. transitivity=rflx))     k/d     condition            ## comment
#
# condition: if the condition evaluates to true
# -> k=keep (keep only this option), d=delete  (delete this tranlsation option from output)
# my -> this node, parent -> parent node, child -> child node (true if condition is met for at least one child node), 
# rsibling/lsibling -> right/left sibling node (true if condition is met for at least one sibling node to the right/left)
# chunkparent: first ancestor that is a chunk
# other attributes than 'mi' can be used as morphTRGT, with 'attr=value', e.g. verbmi=bla will check all syn nodes where verbmi=bla for given conditions
# if no attr is given, morphTRGT is 'mi'

# IMPORTANT: 
# - if more than one translation option with 'k' for a node evaluates to true, the first one will be used to fill 
#   the attributes of NODE, but the all others that evaluate to true will be kept as SYN nodes!
# - rules are stored in a hash, key is the combination of the node condition (1st column) and morphology attribute (3rd column in rules)
#  --> it's not possible to have more than one rule with the same node condition and the same morphology attribute!!


# nouns/adjectives that have different meanings in Spanish (e.g. 'el general' vs. 'general') -> marked in lexicon with 's_pos'
my.smi=/^N/	s_pos=adj	d	my.smi=/^N/
my.smi=/^A/	s_pos=noun	d	my.smi=/^A/


# aqui, ahí, allá: kay, chay, haqay +Loc if static, +Dat with movement verbs
my.slem=aquí		PrnDem+Loc	k	!(xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]})
my.slem=aquí		PrnDem+Dat	k	xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]}
my.slem=ahí		PrnDem+Loc	k	!(xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]})
my.slem=ahí		PrnDem+Dat	k	xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]}
my.slem=allá		PrnDem+Loc	k	!(xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]})
my.slem=allá		PrnDem+Dat	k	xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"]/NODE[@sem="[+Mov]"]}

# conmigo vs mí -> same tag, disambiguate here:
# a mí -> ++1.Sg.Obj, para/por mí -> ñuqapaq /wan etc
# note: PP1CSO00,PP2CSO00 -> not 3x zero, but 'o00' (o=oblique case!)
my.smi=PP1CSO00		++1.Sg.Obj		k	(my.slem=mí && xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="a"]}) 
my.smi=PP1CSO00		PrnPers			k	my.slem=mí && xpath{parent::CHUNK/parent::CHUNK/NODE[not(@slem="a")]}
my.smi=PP1CSO00		PrnPers+Instr		k	my.slem=conmigo

my.smi=PP2CSO00		++2.Sg.Obj		k	(my.slem=/tí|ti/ && xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="a"]})  
my.smi=PP2CSO00		PrnPers			k	(my.slem=/tí|ti/ && xpath{parent::CHUNK/parent::CHUNK/NODE[not(@slem="a")]}) 
my.smi=PP2CSO00		PrnPers+Instr		k	my.slem=contigo

my.smi=PP2CP000		++2.Pl.Obj		k	my.sform=os || xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="a"]}
my.smi=PP2CP000		PrnPers			k	(my.slem=vosotros || my.slem=usted) && xpath{parent::CHUNK/parent::CHUNK/NODE[not(@slem="a")]}

my.smi=PP3CSO00		++Rflx			k	my.slem=sí && xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="a"]}
my.smi=PP3CSO00		NRoot			k	my.slem=sí && xpath{parent::CHUNK/parent::CHUNK/NODE[not(@slem="a")]}
my.smi=PP3CSO00		NRoot+Instr		k	my.slem=consigo

my.smi=PP3CNO00		++Rflx			k	(my.slem=sí && xpath{parent::CHUNK/parent::CHUNK/NODE[@slem="a"]}) || my.slem=se
my.smi=PP3CNO00		NRoot			k	my.slem=sí && xpath{parent::CHUNK/parent::CHUNK/NODE[not(@slem="a")]}
my.smi=PP3CNO00		NRoot+Instr		k	my.slem=consigo

# personal pronoun 1.Pl -> if verb is 2 pers: must be 1.pl.excl
# -> 2 > 1.pl cannot be inclusive
# nos:
my.smi=/PP1.P000/		++1.Pl.Excl.Obj		k	xpath{../ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/descendant-or-self::NODE[contains(@verbmi,"2")]} 

# possessive pronouns 3rd person, Spanish: all 'su', qu: need number of possessor, if possessed noun is singular
# (if both possessor and possessed noun plural -> -nku +kuna -> realized as -nkuna anyway, just take singular
# singular is default, keep plural only if there's a double marked possessive with a plural possessor
# (something like 'su casa de mis tíos' in Andean Spanish)
my.smi=/^DP3/		++3.Pl.Poss		k	xpath{ancestor::CHUNK[@type="sn"]/CHUNK[@type="grup-sp"]/NODE[@slem="de"]} && xpath{ancestor::CHUNK[@type="sn"]/CHUNK[@type="grup-sp"]/CHUNK[@type="sn"]/NODE[starts-with(@smi,"NCMP") or starts-with(@smi,"NCFP") or starts-with(@smi,"NCCP") or starts-with(@smi,"PP3MP") or starts-with(@smi,"PP3FP") or starts-with(@smi,"PP3CP") or starts-with(@smi,"PP3NP")]}
my.smi=/^DP3/		++3.Sg.Poss		k	!(xpath{ancestor::CHUNK[@type="sn"]/CHUNK[@type="grup-sp"]/NODE[@slem="de"]} && xpath{ancestor::CHUNK[@type="sn"]/CHUNK[@type="grup-sp"]/CHUNK[@type="sn"]/NODE[starts-with(@smi,"NCMP") or starts-with(@smi,"NCFP") or starts-with(@smi,"NCCP") or starts-with(@smi,"PP3MP") or starts-with(@smi,"PP3FP") or starts-with(@smi,"PP3CP") or starts-with(@smi,"PP3NP")]} )

# special case: forjar de +material -> ruray material-manta vs. forjar without de -> qiqllamanta ruray
my.slem=forjar && my.smi=/^V/		preform=#qiqllamanta		k	!(xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/CHUNK/NODE[@slem="de"]})
my.slem=forjar 				preform=#qiqllamanta		d	xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/CHUNK/NODE[@slem="de"]}

# special case: invitar: invitar a hacer algo (rogar) -> mañakuy vs. invitar a alguien 
my.slem=invitar				obj=infinitive_a	k		xpath{descendant::NODE[@slem="a"]} && xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/NODE[starts-with(@smi,"VMN") or starts-with(@smi, "VSN")] }
my.slem=invitar && my.smi=/^V/		obj=infinitive_a	d		!(xpath{descendant::NODE[@slem="a"]} && xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/NODE[starts-with(@smi,"VMN") or starts-with(@smi, "VSN")] })


#################
#   verbs	#
#################

# all verbs: if 1.pl > 2 -> cannot be inclusive, keep only 1.pl.excl
my.smi=/^V.+1P/		verbmi=VRoot+1.Pl.Incl.Subj	d	xpath{ancestor::CHUNK[@type="grup-verb" or @type="coor-v"][1]/CHUNK/*[contains(@mi,"++2")]}

# all verb forms: if rel: delete all but obligative,perfect and agentive
my.smi=/^V/		agentive,perfect,obligative	k	chunkparent.verbform=rel:
my.smi=/^V/		agentive			k	chunkparent.verbform=rel:agentive

# all verbs: switch-reference
my.smi=/^V/		SS				 k	chunkparent.verbform=SS
my.smi=/^V/		DS				 k	chunkparent.verbform=DS
my.smi=/^V/		DS,SS				 k	chunkparent.verbform=switch

# all verbs: 
# if <corpus evidentiality="indirect"> -> delete all NPst forms
# if <corpus evidentiality="direct"> -> delete all IPst forms
my.smi=/^V/		indirectpast			d	xpath{ancestor::corpus[@evidentiality="direct"]}
my.smi=/^V/		directpast			d	xpath{ancestor::corpus[@evidentiality="indirect"]}
my.smi=/^V/		habitualpast			d	!(my.slem=soler)

# infinitive: -y or -na (-> hay que hacer, tener que hacer)
# or -spa -> sin hacer -> mana ruraspa
my.smi=VMN0000		obligative			 k	(chunkparent.verbform=obligative || chunkparent.verbform=rel:not.agentive)
my.smi=VMN0000		SS				 k	chunkparent.verbform=SS
my.smi=VMN0000		agentive			 k	(chunkparent.verbform=agentive || chunkparent.verbform=rel:agentive)
my.smi=VMN0000		infinitive			 k	!(chunkparent.verbform=/obligative|SS|agentive/)


  #--------------#
  # transitivity #
  #--------------#
  
my.smi=/^VM/	transitivity=trans		d	!(xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]})
my.smi=/^VM/	transitivity=rflx		d	!(xpath{ancestor::CHUNK[1]/descendant::NODE[@slem="se"]} || my.sform=/rse$/)
my.smi=/^VM/	transitivity=rzpr		d	!(xpath{ancestor::CHUNK[1]/descendant::NODE[@slem="se"]} && (my.smi=/V....P./ || parent.smi=/V....P./ || child.smi=/V....P./  ) )
my.smi=/^VM/	transitivity=intrans		d	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd") or contains(@si,"ci")]}
my.smi=/^VM/	transitivity=intrans,rflx	d	xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd") or contains(@si,"ci")]} && ( !(xpath{parent::CHUNK/descendant::NODE[@slem="se"]})  || my.sform=/rse$/) )    


 #--------------------#
 #  specific          #
 # subcategorization  #
 #--------------------#
 # TODO: SAME variable needed!!!
#my.smi=/^VM/	subj=/.+/		d	!(xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"suj")]/descendant::NODE[@lem="SAME" or @sem="SAME"] })
#my.smi=/^VM/	obj=/.+/		d	!(xpath{ancestor::CHUNK[1]/CHUNK[contains(@si,"cd")]/descendant::NODE[@lem="SAME" or @sem="SAME"] })
 
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

# MAIN VERBS

# relative clause -> la mujer que camina -> puriq warmi
# main clause, la mujer camina -> purin
# subordinated clause -spa (same subject) vs. -pti (same subject)

# in case this needs to be a switch reference form, but the programme failed to determine whether SS or DS -> keep those two, but delete all other otions 
#my.smi=/^VM/		agentive,perfect,present,obligative,future,potential,imperative		d	chunkparent.verbform=switch

# agentive relative clauses
#my.smi=/^VM/		agentive		k	 	chunkparent.verbform=rel:agentive

# indicative present
my.smi=/^VMIP/		perfect			k	 	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VMIP/		present			k	 	chunkparent.verbform=main
my.smi=/^VMIP/		obligative		k		chunkparent.verbform=obligative

# indicative imperfect past
my.smi=/^VMII/		perfect			k	 	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VMII/		obligative		k	 	chunkparent.verbform=obligative
# if this is 'soler' and past tense -> habitual
my.smi=/^VMII/		habitualpast		k	 	my.slem=soler
#if main clause: keep options  direct, indirect or habitual past
my.smi=/^VMII/		agentive,perfect,SS,DS,obligative,habitualpast		d	chunkparent.verbform=main && !(my.slem=soler)

# indicative past simple
my.smi=/^VMIS/		perfect			 		k	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VMIS/		obligative				k	chunkparent.verbform=obligative
#if main clause: keep options  direct, indirect past
my.smi=/^VMIS/		agentive,perfect,SS,DS,obligative	d	chunkparent.verbform=main

# indicative future
my.smi=/^VMIF/		future				k	chunkparent.verbform=main
my.smi=/^VMIF/		obligative			k	chunkparent.verbform=/obligative|rel:not\.agentive/

# conditional present, TODO: relative clauses in conditional?
my.smi=/^VMIC/		potential			k	chunkparent.verbform=main
my.smi=/^VMIC/		obligative			k	chunkparent.verbform=/obligative|rel:not\.agentive/

# subjuntivo imperfecto
my.smi=/^VMSI/		potential			k	chunkparent.verbform=main && !(xpath{ancestor::CHUNK[@type="grup-verb"][2]/NODE[contains(@sem,"speech")]})
my.smi=/^VMSI/		imperative			k	chunkparent.verbform=main && ( xpath{ancestor::CHUNK[@type="grup-verb"][2]/NODE[contains(@sem,"speech")]} || xpath{parent::CHUNK[@type="grup-verb" or @type="coor-v"]/CHUNK[@type="F-term"]/NODE[@slem="!"]} )
my.smi=/^VMSI/		perfect				k	chunkparent.verbform=perfect	 # complement clause
my.smi=/^VMSI/		obligative			k	chunkparent.verbform=obligative

# subjuntivo present, TODO: relative clauses?
my.smi=/^VMSP/		perfect				k	chunkparent.verbform=perfect	 # complement clause
my.smi=/^VMSP/		agentive			k	chunkparent.verbform=rel:agentive	 
my.smi=/^VMSP/		obligative			k	chunkparent.verbform=/obligative|rel:not\.agentive/
# if there's a '!' present: imperative 
my.smi=/^VMSP/		imperative			k	chunkparent.verbform=main && xpath{parent::CHUNK[@type="grup-verb" or @type="coor-v"]/CHUNK[@type="F-term"]/NODE[@slem="!"]}

# main clause: potential or imperative (TODO: other options?)
my.smi=/^VMSP/		obligative,perfect,SS,DS,agentive	d	chunkparent.verbform=main

# imperative forms: ambiguous forms might be wrongly tagged
my.smi=/^VMM/		imperative			k	chunkparent.verbform=main
my.smi=/^VMM/		obligative			k	chunkparent.verbform=obligative

# special case: tener que +inf -> handled in intrachunk_transfer, delete all SYN's as they don't contain obligative as option
my.slem=tener		obligative		k			rsibling.slem=que 
my.slem=tener		perfect,present,DS,SS,agentive,present,future,indirectpast,potential,pastpotential,directpast,imperative	d	rsibling.slem=que 
# special case: deber +inf -> handled in intrachunk_transfer, delete all SYN's as they don't contain obligative as option
#my.slem=deber		obligative		k			xpath{parent::NODE/parent::CHUNK[@verbform="obligative"]}
my.slem=deber		perfect,present,DS,SS,agentive,present,future,indirectpast,potential,pastpotential,directpast,imperative	d	xpath{parent::NODE/parent::CHUNK[@verbform="obligative"]}

# if verbform=ambiguous, but verb has a PR child node -> delete all but agentive, perfect and obligative
my.smi=/^VM/		SS,DS,present,future,potential,imperative,indirectpast,pastpotential,directpast		d	chunkparent.verbform=ambiguous && xpath{child::NODE[starts-with(@smi,"PR") or NODE[starts-with(@smi,"PR") ]]}

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

#################
#auxiliary verbs 
#################

# HABER

# agentive relative clause
#my.smi=/^VA/ && my.slem=haber		agentive		k		chunkparent.verbform=rel:agentive

# indicative future
my.smi=/^VAIF/ && my.slem=haber		obligative		k		chunkparent.verbform=/rel:not\.agentive|obligative/
my.smi=/^VAIF/ && my.slem=haber		futureDisc		k		chunkparent.verbform=main

# imperfect past (había hecho) -> plusquamperfect
my.smi=/^VAII/ && my.slem=haber		perfect			k		chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VAII/ && my.slem=haber		obligative		k		chunkparent.verbform=obligative
my.smi=/^VAII/ && my.slem=haber		indirectpast		k		chunkparent.verbform=main

# perfect past (hubo hecho)
my.smi=/^VAIS/ && my.slem=haber		perfect			k		chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VAIS/ && my.slem=haber		obligative		k		chunkparent.verbform=obligative
# in main clause: directpast or indirectpast, delete everything else
my.smi=/^VAIS/ && my.slem=haber		SS,DS,agentive,perfect,obligative		d		chunkparent.verbform=main

# indicative present TODO: main clause, he hecho-> ruwani or ruwarani?
my.smi=/^VAIP/ && my.slem=haber		perfect			k		chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VAIP/ && my.slem=haber		obligative		k		chunkparent.verbform=obligative
my.smi=/^VAIP/ && my.slem=haber		present			k		chunkparent.verbform=main

# subjuntivo hubiésemos/hubiéramos hecho, TODO: relative clauses??
my.smi=/^VASI/ && my.slem=haber		obligative		k		chunkparent.verbform=obligative
my.smi=/^VASI/ && my.slem=haber		pastpotential		k		chunkparent.verbform=main

# subjuntivo present: hayamos hecho, TODO: relative clause? main clause, present potential (noch nicht in dix, TODO?
my.smi=/^VASP/ && my.slem=haber		obligative		k		chunkparent.verbform=obligative
my.smi=/^VASP/ && my.slem=haber		potential		k		chunkparent.verbform=main

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

# ESTAR as auxiliary (only with gerund, in all other uses: estar mi=VM)

# switch reference
my.smi=/^VA/ && my.slem=estar		progressive_SS			k		chunkparent.verbform=SS
my.smi=/^VA/ && my.slem=estar		progressive_DS			k		chunkparent.verbform=DS
my.smi=/^VM/				progressive_DS,progressive_SS	k		chunkparent.verbform=switch

# agentive relative clause
my.smi=/^VA/ && my.slem=estar		progressive_agentive		k		chunkparent.verbform=rel:agentive

# indicative future, estaremos haciendo
my.smi=/^VAIF/ && my.slem=estar		progressive_future		k		chunkparent.verbform=main
my.smi=/^VAIF/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=/rel:not\.agentive|obligative/

# past imperfect, estaba haciendo
my.smi=/^VAII/ && my.slem=estar		progressive_perfect		k		chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VAII/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=obligative
# main verb: progressive_directpast or progressive_indirectpast, delete everything else
my.smi=/^VAII/ && my.slem=estar		progressive_agentive,progressive_perfect,progressive_DS,progressive_SS,progressive_obligative		d	chunkparent.verbform=main

# indicative past simple, estuve haciendo
my.smi=/^VAIS/ && my.slem=estar		progressive_perfect		k		chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VAIS/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=obligative
# main verb: progressive_directpast or progressive_indirectpast, delete everything else
my.smi=/^VAIS/ && my.slem=estar		progressive_agentive,progressive_perfect,progressive_DS,progressive_SS,progressive_obligative		d	chunkparent.verbform=main 

# indicative present
my.smi=/^VAIP/ && my.slem=estar		progressive_present		k		chunkparent.verbform=main
my.smi=/^VAIP/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=obligative
my.smi=/^VAIP/ && my.slem=estar		progressive_perfect		k		chunkparent.verbform=/rel:not\.agentive|perfect/

# subjuntive past, estuvieramos haciendo, TODO: relative clauses?
my.smi=/^VASI/ && my.slem=estar		progressive_potential		k		chunkparent.verbform=main
my.smi=/^VASI/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=obligative

# subjuntive present, estemos haciendo, TODO: relative clauses?
my.smi=/^VASP/ && my.slem=estar		progressive_potential		k		chunkparent.verbform=main
my.smi=/^VASP/ && my.slem=estar		progressive_obligative		k		chunkparent.verbform=obligative 
my.smi=/^VASP/ && my.slem=estar		progressive_perfect		k		chunkparent.verbform=perfect	#complement

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

# SER as passive or main verb (always VS)

# passive, always the same
my.smi=/^VS/ && my.slem=ser		passive			k	chunkparent.verbform=passive


# infinitive
my.smi=/^VSN0000/ && my.slem=ser		infinitive	k		!(chunkparent.verbform=passive)&&!(chunkparent.verbform=obligative)
my.smi=/^VSN0000/ && my.slem=ser		obligative	k		chunkparent.verbform=obligative

# conditional
my.smi=/^VSIC/ && my.slem=ser		potential		k	chunkparent.verbform=main

# future
my.smi=/^VSIF/ && my.slem=ser		future			k	chunkparent.verbform=main
my.smi=/^VSIF/ && my.slem=ser		obligative		k	chunkparent.verbform=/obligative|rel:not\.agentive/

# past imperfect
my.smi=/^VSII/ && my.slem=ser		perfect			k	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VSII/ && my.slem=ser		obligative		k	chunkparent.verbform=obligative
# if this is 'soler' and past tense -> habitual
my.smi=/^VSII/				habitualpast		k	 my.slem=soler && chunkparent.verbform=main
# main verb: directpast, indirectpast or (habitual past), delete everything else
my.smi=/^VSII/ && my.slem=ser		indirectpast,directpast	k	chunkparent.verbform=main && !(my.slem=soler)

# present
my.smi=/^VSIP/ && my.slem=ser		present			k	chunkparent.verbform=main
my.smi=/^VSIP/ && my.slem=ser		obligative		k	chunkparent.verbform=obligative
my.smi=/^VSIP/ && my.slem=ser		perfect			k	chunkparent.verbform=/rel:not\.agentive|perfect/

# subjuntive present
my.smi=/^VSSP/ && my.slem=ser		perfect			k	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VSSP/&& my.slem=ser		potential		k	chunkparent.verbform=main  && !(xpath{parent::CHUNK[@type="grup-verb" or @type="coor-v"]/CHUNK[@type="F-term"]/NODE[@slem="!"]})
my.smi=/^VSSP/&& my.slem=ser		obligative		k	chunkparent.verbform=obligative
my.smi=/^VSSP/&& my.slem=ser		imperative		k	chunkparent.verbform=main  && xpath{parent::CHUNK[@type="grup-verb" or @type="coor-v"]/CHUNK[@type="F-term"]/NODE[@slem="!"]}
     
# simple past
my.smi=/^VSIS/ && my.slem=ser		perfect			k	chunkparent.verbform=/rel:not\.agentive|perfect/
my.smi=/^VSIS/ && my.slem=ser		obligative		k	chunkparent.verbform=obligative
my.smi=/^VSIS/&& my.slem=ser		directpast,indirectpast	k	chunkparent.verbform=main

# subjuntive past
my.smi=/^VSSI/ && my.slem=ser		obligative		k	chunkparent.verbform=/rel:not\.agentive|obligative/		#complement 'quisera que se fuera a casa'
my.smi=/^VSSI/ && my.slem=ser		perfect			k	chunkparent.verbform=perfect		#complement
my.smi=/^VSSI/ && my.slem=ser		potential		k	chunkparent.verbform=main

# participle sido: había sido cansado vs había sido pegado
my.smi=/^VSP00S/ && my.slem=ser		passive			k	chunkparent.verbform=passive
my.smi=/^VSP00S/ && my.slem=ser		participle		k	!(chunkparent.verbform=passive)

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
