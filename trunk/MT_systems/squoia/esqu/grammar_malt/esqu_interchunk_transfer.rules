# 1							2				3				4			5		6		7
# chunk1Cond						chunk1Attr			chunk2Cond			chunk2Attr		ch1ch2Path	direction	writeMode
# --------------------------------------------------------------------------------------------------------------------------- #
#  possible paths:
#	'my'			=> '.',
#	'child'			=> 'child::CHUNK',
#	'firstchild'		=> 'child::CHUNK[1]',
#	'chunkgrandchild'	=> 'descendant::CHUNK[2]',
#	'descendant'		=> 'descendant::CHUNK',
#	'parent'		=> '..',
#	'chunkparent'		=> 'ancestor::CHUNK[1]',
#	'chunkgrandparent'	=> 'ancestor::CHUNK[2]',
#	'lsibling'		=> 'preceding-sibling::CHUNK',
#	'rsibling'		=> 'following-sibling::CHUNK'




# copy attribue nouncase generated from preposition to noun in the pp
# -> this is only necessary in case the preposition is a postposition marked with 3.Sg.Poss and the noun needs a genitive suffix
# detrás de la casa: wasiPA qhipan
#my.nouncase=/.+/ && my.type=/grup-sp|coor-sp/		nouncase			my.type=sn			nouncase		child		1to2		concat

# --------------------------------------------------------------------------------------------------------------------------- #

# copy object information in addverbmi attribute in sn-chunks (clitics me,te,se) to the next higher verb chunk 
# or to the pp chunk ( a mí, a tí..) and from there to the next higher verb chunk
my.addverbmi=/.+/ && my.type=/sn|coor-n/			addverbmi				xpath{self::CHUNK[@type="grup-verb" or @type="coor-v"]/CHUNK[@type="grup-sp" and not(@spform)]/CHUNK[@type="sn"]/@addverbmi} 		addverbmi			chunkgrandparent		1to2		concat
my.addverbmi=/.+/ && my.type=/sn|coor-n/			addverbmi				xpath{self::CHUNK[@type="grup-verb" or @type="coor-v"]} && ( !(child.slem=/^ir$/marchar/) && !(child.smi=/VMM01P0|VMSP1P0/ ) )				addverbmi			parent					1to2		concat


# copy chunkmi from sadv (negation) to chunk above, be it nominal or verbal (independent suffixes)
# excpetion: if this is a negated question, -chu attaches to mana
# ¿no comes? -> manachu mikunki? not: *manam mikunchu?
# also: not in negated ecuational clauses: la casa no es grande -> wasiqa manam hatunchu (kan), not *manam hatun kanchu
my.type=/sadv/ && my.chunkmi=/.+/ && child.slem=no			"+Neg"				my.type=/grup-verb|coor-v/ &&!(xpath{descendant::CHUNK[@type="F-term"]/NODE[starts-with(@smi,"FI")]}) && !(child.lem=ka)		chunkmi			parent				1to2		concat

# copy chunkmi=+Inst / +Add  in coordination from head to child (from coor-n to sn)
my.type=coor-n && my.chunkmi=/\+Instr|\+Add/		chunkmi				my.type=sn				chunkmi			child				1to2		concat	


# copy ++Poss from propietario to the possessed noun
child.slem=/propietario|dueño/ && my.chunkmi=++Poss	chunkmi			my.type=sn				chunkmi			chunkgrandchild			1to2		concat

# in a pp with a coordinated np inside: copy the case/nouncase attribute to the second coordinated np
#my.type=/grup-sp|coor-sp/ && child.type=coor-n		case			my.type=sn && chunkparent.type=coor-n			case			ancestor		1to2		overwrite
my.type=sn && chunkparent.type=coor-n 			case			my.type=/grup-sp|coor-sp/ && my.case=/.+/			case		chunkgrandparent	2to1		overwrite

# headless relative clause with preposition -> copy case from preposition ('por lo que he visto' -> rikusqay-rayku)
my.type=grup-sp && my.case=/.+/ && !(xpath{../child::CHUNK[@type="sn" or @type="coor-n"]})			case					my.type=/grup-verb|coor-v/ && my.HLRC=yes		chunkmi			chunkparent			1to2	concat

# subject in nominal verb chunk: add genitive
# TODO check if thats correct: 
# ella sabe que tú te has ido -> qam(pa?) rikusqaykita yachan
# note: parser labels stuff as suj that clearly isn't, e.g. 'algunos sectores de los medios populares se apresuraron a interpretar esto como prueba de que..' -> check if 'que' present, otherwise: this is not a subject clause!
#my.si=/suj/ 		case		my.verbform=/perfect|obligative|not\.agentive/ && my.case=+Acc			"+Gen"		parent		2to1		overwrite
my.si=/suj/ 		case		my.verbform=/perfect|obligative|not\.agentive/ && xpath{child::NODE/descendant-or-self::NODE[@slem="que"]}					"+Gen"		parent		2to1		overwrite

## sólo/solamente -> copy chunkmi from sadv chunk to head
child.slem=/sólo|solamente|a_cada_rato|a_cada_paso|a_cada_instante|a_cada_momento|todavía/ && my.chunkmi=/^\+\+/		chunkmi			my.type=/.+/		chunkmi		parent		1to2		concat

# para, a_fin_de, con_fin_de, con_objeto_de +infinitive: verbchunk is set to obligative, but needs person of verb as possessive suffix! -> same subject as head verb
# note: only first ancestor with finite verb!!
# same for all infinitives within pp-chunks (?)

my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos}) && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "1S") or descendant-or-self::NODE[ contains(@smi, "1S")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+1.Sg.Poss"			ancestor 			2to1			concat
my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos}) && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "2S") or descendant-or-self::NODE[ contains(@smi, "2S")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+2.Sg.Poss"			ancestor 			2to1			concat
my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos}) && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "3S") or descendant-or-self::NODE[ contains(@smi, "3S")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+3.Sg.Poss"			ancestor 			2to1			concat
my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos})  && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "1P") or descendant-or-self::NODE[ contains(@smi, "1P")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+1.Pl.Incl.Poss"		ancestor 			2to1			concat
my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos}) && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "2P") or descendant-or-self::NODE[ contains(@smi, "2P")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+2.Pl.Poss"			ancestor 			2to1			concat
my.type=/grup-verb|coor-v/ && ( ((chunkparent.case=/.+/ && !(chunkparent.case=+Acc ) ) || xpath{parent::CHUNK/NODE/@postpos}) && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} )					addverbmi									my.type=/grup-verb|coor-v/ && xpath{child::NODE[contains(@smi, "3P") or descendant-or-self::NODE[ contains(@smi, "3P")] ]  } && !(xpath{descendant::CHUNK[ (@type="grup-verb" or @type="coor-v") and child::NODE[(starts-with(@smi,"V") and  (contains(@smi, "1")  or contains(@smi, "2") or contains(@smi, "3")) )or descendant-or-self::NODE[starts-with(@smi,"V") and ( contains(@smi, "1") or contains(@smi, "2") or contains(@smi, "3") ) ] ] ]/descendant::CHUNK[@type="grup-sp" or @type="coor-sp"]/CHUNK[@type="grup-verb" or @type="coor-v" ]/NODE[(@smi="VMN0000" or @smi="VSN0000" ) and count(descendant::NODE[starts-with(@smi,"V")] )=0 ] })		"+3.Pl.Poss"			ancestor 			2to1			concat

# infinitive within pp-chunk with case attribute: -> copy case to verb chunk
my.type=/grup-verb|coor-v/ && chunkparent.case=/.+/ && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]}				chunkmi				my.type=/grup-sp|coor-sp/ && my.case=/.+/				case				parent				2to1				concat
my.type=/grup-verb|coor-v/ && chunkparent.nouncase=/.+/  && child.smi=/VMN0000|VSN0000/ && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V")] )=0 ]} 			chunkmi				my.type=/grup-sp|coor-sp/ && my.nouncase=/.+/				nouncase			parent				2to1				concat
# special case: por -rayku -> -sqa,  'por haberse ido, por irse'
my.type=/grup-verb|coor-v/ && xpath{parent::CHUNK/NODE[@case="+Kaus"]}  && (child.smi=/VMN0000|VSN0000/ || xpath{child::NODE[starts-with(@smi, "VMP")]/descendant::NODE[@smi="VAN0000"] }  ) && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V") and ( contains(@smi,"1") or contains(@smi,"2") or contains(@smi,"2") )] )=0 ]} 			chunkmi				my.type=/grup-sp|coor-sp/ && child.case=+Kaus				+Perf			parent				2to1				concat
xpath{parent::CHUNK/NODE[@case="+Kaus"]} && my.type=/grup-verb|coor-v/  && (child.smi=/VMN0000|VSN0000/ || xpath{child::NODE[starts-with(@smi, "VMP")]/descendant::NODE[@smi="VAN0000"] }  ) && xpath{child::NODE[count(descendant::NODE[starts-with(@smi,"V") and ( contains(@smi,"1") or contains(@smi,"2") or contains(@smi,"2") )] )=0 ]} 			deleteMorph				my.type=/grup-sp|coor-sp/ && child.case=+Kaus			+Inf			parent				2to1				concat



# subject of a relative clause with IHRC=yes (internally headed relative clause)
# -> add genitive suffix to subject
# also: add possessive suffix of subject person to (nominal) verbform if the rel.clause is not.agentive (in intrachunk.rules!)
my.type=/sn|coor-n/ && my.si=/suj/		case		my.IHRC=yes		"+Gen"		parent			2to1			concat

# +Add from también: move to parent chunk
# NOTE: parser attaches 'también' ALWAYS to the verb, might not be always correct, but there's really no way to be certain... 
# -> we attach -pas to the verb
my.chunkmi=++Add && child.slem=también			chunkmi			my.type=/.+/ && !(my.delete=yes)		chunkmi		parent		1to2		concat

#


# +Disc from 'ya': move to parent chunk
child.lem=ña && child.moveToHead_mi=/.+/		"+Disc"			my.type=/.+/ && !(my.delete=yes)		chunkmi		parent		1to2		concat

## special case, 
##  subjToObj=1, forms with -naya: make Subj -> Obj (tengo hambre -> yarqanayaWAn)
## or subjToObj=2, e.g. 'se me anotoja un helado' -> 'heladoTA munapakuNI'
## -> for subjToObj=2, add accusative to original subject and set @si=cd
my.si=/suj/ 		case				xpath{child::NODE[@subjToObj="2"]} && my.type=/grup-verb|coor-v/ 		"+Acc"		parent		2to1		overwrite

# delete accusative within nominal clauses 
# (?? really?? both possible? what is the rule (appart form unspecific objects)? TODO!!)
# -> either: verbform=perfect or obligative, or: from Spanish infinitives -> just case + only child=infinitive +parent +grup-sp  
#(my.case=+Acc  || chunkparent.case=+Acc) && my.type=/sn|coor-n/			deleteMorph				 	 my.verbform=/perfect|obligative/ || ( my.type=/grup-verb|coor-v/ && my.chunkmi=/Acc|Ben/ && child.mi=infinitive && xpath{child::NODE[count(child::NODE)=0]} )   			"+Acc"			ancestor		2to1		concat

## if verb chunk has an objCase/iobjCase (from lexicon): overwrite case of object chunk
# e.g. embarcar el avión -> avionMAN wichay/yaykuy
my.si=/cd/ 		case				 my.type=/grup-verb|coor-v/ && my.objCase=/.+/ 		objCase		parent		2to1		overwrite
my.si=/ci/ 		case				 my.type=/grup-verb|coor-v/ && my.iobjCase=/.+/ 		iobjCase	parent		2to1		overwrite

# hay + cd -> no accusative (hay leña -> llamt'a kan, no *llamt'ata kan)
my.si=/cd/    	deleteMorph			child.slem=haber && child.smi=/3S/  && !(xpath{child::NODE[@slem="haber"]/descendant::NODE[starts-with(@smi,"V") or @slem="que"]})		"+Acc"			parent		2to1	concat					

# in sentence with 3rd sg present copula -> kan is set to be deleted, in this case, insert -mi/si in cpred/atr
# -> sólo si no hay negación.., con negación -> manam .. verb-chu
# note: with negated ecuational clause: -chu attaches to cpred/atr -> not in questions! (in questions: pred has -chu)
my.si=/cpred|^atr/ && my.type=/^sa|coor-sa/		chunkmi		my.type=grup-verb && my.delete=yes && !(my.copula=question) && child.lem=ka &&  !(xpath{descendant::NODE[@smi="RN"]}) && xpath{ancestor::corpus[@evidentiality="direct"]}	"+DirE"		parent		2to1		concat
my.si=/cpred|^atr/ && my.type=/^sa|coor-sa/		chunkmi		my.type=grup-verb && my.delete=yes && !(my.copula=question) && child.lem=ka &&  !(xpath{descendant::NODE[@smi="RN"]})  && xpath{ancestor::corpus[@evidentiality="indirect"]}	"+IndE"		parent		2to1		concat

# for prepositional chunks that are 'cpred' or 'atr' with deleted copula, insert -m/-s
my.type=/sn|coor-n/ && parent.si=/cpred|^atr/ && parent.type=/grup-sp|coor-sp/		chunkmi		my.type=grup-verb && my.delete=yes && !(my.copula=question) && child.lem=ka && !(xpath{descendant::NODE[@smi="RN"]}) && xpath{ancestor::corpus[@evidentiality="direct"]}	"+DirE"		ancestor		2to1		concat
my.type=/sn|coor-n/ && parent.si=/cpred|^atr/ && parent.type=/grup-sp|coor-sp/		chunkmi		my.type=grup-verb && my.delete=yes && !(my.copula=question) && child.lem=ka && !(xpath{descendant::NODE[@smi="RN"]}) && xpath{ancestor::corpus[@evidentiality="indirect"]}	"+IndE"		ancestor		2to1		concat

# attach -chu to cpred/atr in ecuational negated clauses, unless its a negated question, then -chu attaches to mana (qharichu kanki vs. manachu qhari kanki)
# --> basically, attach -chu if question&&no-negation, or if negation&&not-question
my.si=/cpred|^atr/ && my.type=/^sa|coor-sa/		chunkmi		my.type=grup-verb && child.lem=ka && ( ( (xpath{descendant::NODE[@smi="RN"]}) && !(my.copula=question) ) || ( !(xpath{descendant::NODE[@smi="RN"]}) && my.copula=question ))	"+Neg"		parent		2to1		concat


# for prepositional chunks that are 'cpred' or 'atr' with deleted copula, insert -m/-s
my.type=/sn|coor-n/ && parent.si=/cpred|^atr/ && parent.type=/grup-sp|coor-sp/		chunkmi		my.type=grup-verb && my.delete=yes && child.lem=ka && !(xpath{descendant::NODE[@smi="RN"]}) & xpath{ancestor::corpus[@evidentiality="direct"]}		"+DirE"		ancestor		2to1		concat



# subject of copula in equational clauses (Pedro es de Lima) -> -qa 
# unless IHRC -> in that case, nominalized verb of rel-clause -> -qa
(my.si=suj && my.type=sn) && !(xpath{child::CHUNK[@IHRC="yes"]})			chunkmi			      my.type=grup-verb && child.lem=ka && xpath{child::CHUNK[@si="cpred" or @si="atr"]} 		"+Top"				parent		2to1		concat
my.IHRC=yes							chunkmi			      my.type=grup-verb && child.lem=ka && xpath{child::CHUNK[@si="cpred" or @si="atr"]} 		"+Top"				chunkgrandparent		2to1		concat



# yes-no questions: insert -chu, unless negative question..then leave -chu at mana
# should be attached to focalized chunk... for lack of better options, attach to head of sentence
# note: tag +Neg= -chu, for simplicity, even though it functions as interrogative here, not negation
my.type=F-term && child.smi=/FIT|FIA/			"+Neg"		!(my.type=F-term) && !(xpath{descendant::NODE[starts-with(@smi,"PT")]}) && !(xpath{child::CHUNK/NODE[@slem="no"]}) && !(my.copula=question)			chunkmi			parent				1to2		concat

# special case: sin .. nada -> 
#<CHUNK ref="3" type="grup-sp" si="cc" prepos="mana" nouncase="+Instr">
#<NODE ref="3" alloc="" slem="sin" smi="SPS00" sform="sin" UpCase="none" lem="" adpos="sin" prepos="mana" nouncase="+Instr"/>
#<CHUNK ref="4" type="sn" si="sn">
#<NODE ref="4" alloc="" slem="nada" smi="PI0CS000" sform="nada" UpCase="none" lem="ima" add_mi="+Add" preform="#mana" mi="PrnInterr+Add"/>
#</CHUNK>
# --> delete one 'mana'

my.type=grup-sp && child.slem=sin && my.prepos=mana		prepos		(my.type=sn && child.slem=nada) || xpath{self::CHUNK[@type="grup-verb" and NODE[@smi="VMN0000"]]/CHUNK[@type="sn"]/NODE[@slem="nada"]}		""			child			2to1			overwrite








