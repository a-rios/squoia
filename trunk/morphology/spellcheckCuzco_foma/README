*********************
* SQUOIA-Spellcheck *
*********************

version 0.2
09-10-2012
email: arios@ifi.uzh.ch

------------------
 1. Installation:
------------------

First of all, you have to get the foma sources. Foma is a compiler, programming language, and C library for constructing finite-state automata and transducers, see http://code.google.com/p/foma/ for more information.

To get the foma sources, checkout the foma svn repository like this:

svn co http://foma.googlecode.com/svn/trunk/foma/

Now copy the files in /foma_files into the foma source directory. This will replace the original foma Makefile and it will add fmed.c.

Then compile foma as normal, by 'make' and 'make install' (it's really simple, for more detailed instructions see the foma website). Default installation path is /usr/local, if you want to have foma somewhere else, replace the value of 'prefix' in the Makefile (first variable).

This will create the binaries foma (to start the interface), flookup (utility to analyze/generate directly from the shell) and fmed (utility to do a med search (spell checking) directly from the shell).

Note: if you already have foma installed, you will still have to replace the original foma files with the ones given in the package and compile it again, if you want to use fmed (spell checking from the shell).

-----------
 2. Usage
-----------

Once you have successfully installed foma, you have to compile the spell checker. There are two script files included, analyzeCuzco.foma and spellcheck.foma. The former is intended to be used for analysis, the latter for spell checking. To compile the binaries, you have to possibilities, either run the following commands in a shell:

$ foma -f analyzeCuzco.foma
$ foma -f spellcheck.foma

or use the foma interface. If foma is in your PATH, just type 'foma' in a shell, this will start the interface:

$ foma
Foma, version 0.9.16alpha
Copyright Â© 2008-2010 Mans Hulden
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; for details, type "help license"

Type "help" to list all commands available.
Type "help <topic>" or help "<operator>" for further help.

foma[0]:

Then type the following:

foma[0] source analyzeCuzco.foma
foma[0] source spellcheck.foma

The resulting .fst files are the binaries to use for spell checking or analysis. The analyzer is a transducer, with an abstract upper side (morphological tags) and a natural language lower side. The spell checker is just a simple automaton, as foma med search can be applied only to automata, not transducers. 
Next time you start the interface, you can directly load the compiled binaries onto the stack with 'load stack':

foma[0] load stack analyzeCuzco.fst
foma[0] load stack spellcheck.fst

foma[i] -> i is the number of networks on the stack.

----------------
 2.1 Analysis
----------------

For analysis with the interface, simply use 'apply up', or short 'up':

foma[1]: up chayraykus
PrnDem+Kaus+IndE

foma[1]: up waylluykipas
=querer,amar+1.Sg.Subj_2.Sg.Obj+Add
=amor+2.Sg.Poss+Add

Some word forms may have more than one possible analysis. Note that ONLY 3-vocalic Cuzco Quechua forms are recognized, e.g. forms with progressive -chka won't be analyzed.
If you have text in a different dialect or in 5-vocalic writing, use the general SQUOIA analyzer instead of this one, as it is more robust.

For analysis directly from the shell, use the foma utility flookup:

$ echo "chayraykus" | flookup analyzeCuzco.fst
chayraykus      PrnDem+Kaus+IndE

For a list of the tags used, see TAGS.

---------------------
 2.2 Spell Checking
--------------------

This section contains information about spell checking in the foma interface or from the shell. A more comfortable way for spell checking texts is using the Makefile, see section 3 below.

For spell checking using the interface, type 'apply med' or short 'med':

foma[1]: med waoi
Calculating heuristic [h]
Using Levenshtein distance.

wasi
waoi
Cost[f]: 1


watu
waoi
Cost[f]: 2


wata
waoi
Cost[f]: 2


wara
waoi
Cost[f]: 2


wanu
waoi
Cost[f]: 2


Default maximum number of suggestions is 5, and default maximum Levenshtein distance is 15. Levenshtein distance is an error metric based on four basic edit operations, for more information see for example the Wikipedia page:

http://en.wikipedia.org/wiki/Levenshtein_distance

Cost[f] gives the actual Levenshtein distance of the corresponding suggestion.

Values for both maximum number of suggestions and maximun number of Levenshtein distance can be changed through setting the global variables med-limit (number of suggestions) and med-cutoff (Levenshtein distance):

foma[1]: set med-limit 10
variable med-limit = 10

foma[1]: set med-cutoff 2
variable med-cutoff = 2

It is possible to use a confusion matrix with the interface, see the foma interface reference: http://foma.sourceforge.net/dokuwiki/doku.php?id=wiki:interfacereference

Note that the confusion matrix in this spell checker sets the cost of 'normal' deletion, substitution and insertion to 3 (whereas language specific operations may ocurr at a lower cost, e.g. substitution of 'e' with 'i').

For spell checking from the shell, use the fmed utility like this:

$ echo waoi | fmed spellcheck.fst
Calculating heuristic [h]
Using confusion matrix.

waki
waoi
Cost[f]: 3

wasi
waoi
Cost[f]: 3

wach'i
waoi
Cost[f]: 5



To change number of suggestions use the option -l with a number (can't be 0!), to change the number of allowed Levenshtein distance, use the option -c with a number.

$ echo waoi | fmed -l 2 spellcheck.fst
Calculating heuristic [h]
Using confusion matrix.

waki
waoi
Cost[f]: 3

wasi
waoi
Cost[f]: 3


$ echo waoi | fmed -c 3 spellcheck.fst
Calculating heuristic [h]
Using confusion matrix.

waki
waoi
Cost[f]: 3

wasi
waoi
Cost[f]: 3

Reached cutoff of 3.


fmed -h gives an overview over the different options. fmed doesn't implement the possibility for a confusion matrix.

------------------------
 3. Using the Makefile
------------------------

There is an additional Makefile (not the one in /foma_files!), that offers 3 targets: 

analysed.txt -> produces a list of all the tokens in the input text with their morphological analysis             
failures.txt -> creates a list of all the tokens in the text the transducer failed to analyse         
spellcheck.txt -> creates a list of all the words in the text that were not recognized with a list of 
                        with a list of suggestions (default: 5 suggestions, you can change that by editing 
                        the part fmed -l NUMBER in the invocation of the target 'spellcheck.txt'  

In order to use the Makefile, open the Makefile in an editor and set the variable TEXTS like this:

TEXTS:=  path-to-your-text

Save it, then open a terminal and type either

$ make analysed.txt

or
$ make failures.txt

or 
$ make spellcheck.txt

NOTE: In order to use the Makefile, you have to compile foma following the instructions above, as fmed is needed. Also, you must have perl installed.
IMPORTANT: All input text files have to be in UTF-8 encoding!


For feedback, suggestions, ideas or corrections, please write to arios@ifi.uzh.ch
