# set char-encoding utf-8
# -*- encoding: utf-8 -*-

       #derivation boundary
       define DB [[ "[" "^DB" "]"] :0];
       define removeDB ["" <- "[" "^DB" "]"];

      #Morpheme-Boundary
       define MB [[ "[""--""]"] :0];

       #--------------------------------------------------------#
       # Alle Tags und Worttrenner auf Wortformenebene löschen! #
       #--------------------------------------------------------#
       define Cleanup1 [["@MU"|"@PU"|"@KU"|"@YSI"|"@RI"|"@MPA"|"@CHI"|"@RQU"|"@MI"|"@SI"|"@CHA"|"@Vdim"|"@YKU"|"@YU"|"@PTI"|"@STI"|"@PA"|"@TA"|"@AS"|"@ALLI"|"@HATU"|"@POSS"|"@POSSni"|"+ku+"|"+yku+"|"+yu+"|"+rqu+"|"+ru+"|"+pu+"|"+mu+"|%["CARD"%]|"+nn"|"@PLYUQ"|"@NAWPA"|"@CHIQA"|"@YANA"] -> ""];
       define Cleanup2 ["" <- ["@MU"|"@PU"|"@KU"|"@YSI"|"@MPA"|"@RI"|"@CHI"|"@RQU"|"@MI"|"@SI"|"@CHA"|"@Vdim"|"@YKU"|"@YU"|"@PTI"|"@STI"|"@PA"|"@TA"|"@AS"|"@ALLI"|"@HATU"|"@POSS"|"@POSSni"|"+ku+"|"+yku+"|"+yu+"|"+rqu+"|"+ru+"|"+pu+"|"+mu+"|"+nn"|"@NAWPA"|"@CHIQA"|"@YANA"] ];

############################################################################### 

          #########################
          #                       #
          # PHONETISCHE VARIANTEN #
          #                       #
          #########################

      define Vokale [a|e|i|o|u|á|é|í|ó|ú|A|E|I|O|U|Á|É|Í|Ó|Ú|"@TA"|{pa}"@PA"|"@PTI"|"@STI"];
      define Cons [b|c|d|f|g|h|j|k|l|m|n|ñ|p|q|r|s|t|v|w|y|z|'|{m}"@MU"|{m}"@MI"|{s}"@SI"|{ch}"@CHA"|{ntin}"@NTIN"|{p}"@PA"|{q}"@PA"];

      #--------------------------#
      # Grossschreibung erlauben #
      #--------------------------#

      define Klein [A (->) a, B (->) b, C (->) c,D (->) d,E (->) e,F (->) f,G (->) g,H (->) h,I (->) i,J (->) j,K (->) k,L (->) l,M (->) m,N (->) n,O (->) o,P (->) p,Q (->) q,R (->) r,S (->) s,T (->) t,U (->) u,V (->) v,W (->) w,X (->) x,Y (->) y,Z (->) z,Ñ (->) ñ];

      define Gross [ a (->) A,b (->) B,c (->) C,d (->) D,e (->) E,f (->) F,g (->) G,h (->) H,i (->) I,j (->) J,k (->) K,l (->) L,m (->) M,n (->) N,o (->) O,p (->) P,q (->) Q,r (->) R,s (->) S,t (->) T,u (->) U,v (->) V,w (->) W,x (->) X,y (->) Y,z (->) Z,ñ (->) Ñ];


      #-------------------------------------------------------------------#
      # Ersetze optional u durch o und i durch e, falls in Umgebung von q #
      #-------------------------------------------------------------------#

      define Allophone1 [ u (->) o||  _ (s|t|n|r|l) q, q (s|t|n|r|h|l|') _  , _ (s|t|n|r|l){cc}, {cc}(s|t|n|r|h|l|') _ ] .o. [i (->) e || _ (s|t|n|r|h|l) q, q (s|t|n|r|l|ll|h|') _ , _ (s|t|n|r|h|l){cc}, {cc}(s|t|n|r|l|ll|') _  ];

      #define Allophone2 [ m (->) n || _ p];
      define Allophone2 [ m (->) n || \"@MPA" _ p ];
      define Allophone3 [ {ll} (->) l || _ q];

      define Allophone [Allophone1 .o. Allophone2 .o. Allophone3] ;

       #---------------------------#
       # alternative Schreibweisen #
       #---------------------------#

       define Orthographie1 [ {q} (->) {cc}];
       define Orthographie2 [ {wi} (->) {hui}];
       define Orthographie3 [ {wa} (->) {hua}];
       define Orthographie4 [ {w} (->) {u} || {a}_ ];
       define Orthographie5 [ {h} (->) {j}];
       define Orthographie6 [ {ch} (->) {ts}];
       
       define Orthographie [Orthographie1 .o. Orthographie2 .o. Orthographie3 .o. Orthographie4 .o. Orthographie5 .o.  Orthographie6];

       define QuechuaOrtho Allophone .o. Orthographie;

       # apply after Cleanup
       define Accent1 [ a (->) á, u (->) ú ||  _ [w|y] .#.];
       define Accent2 [ {qa} (->) {qá}, {taq} (->) {táq}, {ri} (->) {rí}|| _  .#.];
       define Accent Accent1 .o. Accent2;
       
       #-----------------------------------------#
       # Orthographie der spanischen Lehnwörter: #
       #                                         #-------------------------------------------#
       #- für die spanischen Wörter, die manchmal mit, manchmal ohne Akzent geschrieben sind #
       #- e teils als i, o als u geschrieben                                                 #
       #-------------------------------------------------------------------------------------#
       define Akzent [ á (->) a,é (->) [e|i],í (->) i, ó (->) [o|u],ú (->) u, ü (->) u];
       define Akzent2 [ a (->) á,e (->) é, i (->) í,o (->) ó, u (->) ú, u (->) ü ];
       define spanLetras [ e (->) i, i (->) e, o (->) u, u (->) o, c (->) k , d (->) t, g (->)j, w  (->) o, b (->) p, v (->) w, z (->) s , j (->) h];
       define SpanOrtho Akzent .o. Akzent2 .o. spanLetras;

########################################################################
########################################################################
##                                                                    ##
##               MORPHOPHONOLOGISCHE REGELN                           ##
##                                                                    ##
########################################################################
########################################################################

      ###########
      # NOMINAL #
      ###########

      #--------------------------------------------------#
      # Possessiv -nkuna -> ambig: -n-kuna oder nku-kuna #
      #--------------------------------------------------#

       define 3PossPl  [ {nku} %["NPers"%] %["+3.Pl.Poss"%] (<-) n %["NPers"%] %["+3.Sg.Poss"%] \\  _ %["--"%]{kuna}%["Num"%] ];


       #-------------------------------------------------#
       # Possessiv -ykuna -> ambig: y-kuna oder yku-kuna #
       #-------------------------------------------------#

       define 2PossPl [ {yku} %["NPers"%] %["+1.Pl.Excl.Poss"%] (<-) y %["NPers"%] %["+1.Sg.Poss"%] \\  _ %["--"%]{kuna}%["Num"%] ];

       define PossessivPlural [3PossPl .o. 2PossPl];

       #---------------------------------------------------------#
       # Genitiv -pa nach Konsonant, -q/-p nach Vokal (optional) #
       #---------------------------------------------------------#
      # define GENITIV [ {pa}"@PA" (->) [{p}|{q}]"@PA"  ||Vokale  _ ];
	define PA1 [  {q}"@PA"  => Vokale _  ];
	define PA2 [  {p}"@PA"  => Vokale _  ];
	#define PA3 [  {pa}"@PA" => Cons _  ];
      define GENITIV PA1 .o. PA2 ;

       #------------------------------------------------#
       # Possessivformen euphon. -ni/-ñi nach Konsonant #
       #------------------------------------------------#

        #define POSSESSIV1 [ {@POSS} -> [{ni}|{ñi}]  || Cons _ ];
        #define POSSESSIV2 [ {@POSS} ->  "" || Vokale _ ];
	#define POSSESSIV POSSESSIV1 .o. POSSESSIV2;

	define POSS1 [ "@POSS"  => Vokale _  ];
	define POSS2 [ "@POSSni" => Cons _  ];

      define POSSESSIV POSS1 .o. POSS2;

       define NounRules GENITIV .o. POSSESSIV;

       ##########
       # VERBAL #
       ##########

       #--------------------------------------------------------#
       # na als +Rzpr muss von ku, chi oder spa gefolgt werden, #
       # mu darf nur als 'n' vorkommen vor pu                   #
       #--------------------------------------------------------#
       define naRzpr [  "+Rzpr"  => _ ?* ["+Rflx_Int"|"+Caus"|"+SS"] ];
       #define mpuDIR3 [ "+nn+" =>   _ ?* "@PU" ];

       #--------------------------------------------------------------------------------------------------------------------#
       # wenn auf Unterseite im Wort {rqu} als {rqa}, {pu} als {pa} etc. -> muss auch auf Oberseite (Tags) angepasst werden #
       #--------------------------------------------------------------------------------------------------------------------#

       define rqurqa5 [ {rqa}"+rqu+" <- {rqu}"+rqu+" \\ _ ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"]];
       define rqurqa6 [ {ra}"+ru+" <- {ru}"+ru+" \\ _ ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"]];
       define ykuyka3 [ {yka}"+yku+" <- {yku}"+yku+" \\ _   ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"|"@Vdim"|"+Rzpr"]];
       define ykuyka4 [ {ya}"+yu+" <- {yu}"+yu+" \\ _ ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"|"@Vdim"|"+Rzpr"]];
       define mpuDIR2 [ {m}"+mu+" <- {mu}"+mu+"  \\  _ ?* "@PU" ];

       define pupa2 [ {pa}"+pu+" <- {pu}"+pu+" \\  _  ?* ["@KU"|"@MU"] ];
       define kuka2 [ {ka}"+ku+" <- {ku}"+ku+" \\  _  ?* ["@MU"|"@CHI"|"@PU"|"+Rzpr"] ];

      define VerbRulesUpper  naRzpr  .o. rqurqa5 .o. rqurqa6 .o. ykuyka3 .o. ykuyka4 .o. mpuDIR2  .o. pupa2 .o. kuka2;

       #-------------------------------------------------------------------------------------------#
       # rqu --> rqa vor mu, pu , ri ,ysi (rqa soll nur an dieser Stelle als +Rptn erkannt werden, #
       # überall sonst als +NPst)                                                                  #
       #-------------------------------------------------------------------------------------------#
       define rqurqa1 [ {rqu}"@RQU"-> {rqa}"@RQU"  || _  ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"]];
       define rqurqa2 [ {ru}"@RQU"-> {ra}"@RQU" || _ ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"]];
       define rqurqa3 [ {rqu}"@RQU" (->) {rqa}"@RQU"  || _  ?* "@KU"];
       define rqurqa4 [ {ru}"@RQU" (->) {ra}"@RQU" || _ ?* "@KU"];      

       #-------------------------------------------------------#
       # -yku wird zu -yka vor -mu, -pu, -ysi, -chi, -ri, -cha #
       # und -na. Jedoch nicht immer (?), daher optional       #
       #-------------------------------------------------------#
       define ykuyka1 [ {yku}"@YKU" (->) {yka}"@YKU" || _   ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"|"+Rzpr"]];
       define ykuyka2 [ {yu}"@YKU" (->) {ya}"@YKU" || _ ?* ["@MU"|"@PU"|"@YSI"|"@CHI"|"@RI"|"+Rzpr"]];

       #-----------------------------------------------------------------------------------------------------------------------#
       # -mu Translokativ --> als -m nur vor pu (da sonst Verwechslung mit -mpa, Positional, -mpu manchmal als npu geschrieben #
       #-----------------------------------------------------------------------------------------------------------------------#
       define mpuDIR [ {mu}"@MU" -> {m}"@MU"  ||  _ ?* "@PU" ];

       #---------------------------------------------------------------------------------#
       # pu Regressiv --> pa nur vor ku und mu (da sonst Verwechslung mit -pa repetitiv) #
       #---------------------------------------------------------------------------------#
       define pupa [ {pu}"@PU" -> {pa}"@PU" ||  _  ?* ["@KU"|"@MU"] ];

       #---------------------------------------------------------------#
       # ku Reflexiv --> ka vor chi und mu und pu (evt auch vor na (?) #
       #---------------------------------------------------------------#
       define kuka [ {ku}"@KU" -> {ka}"@KU" ||  _  ?* ["@MU"|"@CHI"|"@PU"|"+Rzpr"] ];



   define VerbRulesLower rqurqa1 .o. rqurqa2  .o. rqurqa3 .o. rqurqa4 .o. ykuyka1 .o. ykuyka2 .o. mpuDIR .o. pupa .o. kuka;


       ##############
       # AMBIVALENT #
       ##############

       #-----------------------------------------------------------------------------------------------------#
       # Evidentialsuffixe mi,si,cha als -m,-s,-ch nur nach Vokal. Regel erst auf ganze Wortformen anwenden, #
       # da sonst Vokale vor AS-Suffix Sequenz nicht im Kontext erscheinen                                   #
       #-----------------------------------------------------------------------------------------------------#

       #define EVID1 [ {mi}"@MI" -> [{m}|{n}]"@MI"  ||Vokale  _ ];
       #define EVID2 [ {si}"@SI" -> {s}"@SIu" || Vokale  _ ];
       #define EVID3 [ {chi}"@CHA" -> {ch}"@CHA" || Vokale  _ ];
       #define EVID4 [ {cha}"@CHA" -> {ch}"@CHA" || Vokale  _ ];

	define SI1 [  {s}"@SI"  => Vokale _  ];
	define SI2 [  {si}"@SI" => Cons _  ];

	define MI1 [  {m}"@MI"  => Vokale _  ];
	define MI2 [  {n}"@MI"  => Vokale _  ];
	define MI3 [  {mi}"@MI" => Cons _  ];

	define CHA1 [  {ch}"@CHA"  => Vokale _  ];
	define CHA2 [  {chi}"@CHA"  => Cons _  ];
	define CHA3 [  {cha}"@CHA" => Cons _  ];

       #define AmbiRules EVID1 .o. EVID2 .o. EVID3 .o. EVID4;
	define AmbiRules SI1 .o. SI2 .o. MI1 .o. MI2 .o. MI3 .o. CHA1 .o. CHA2 .o. CHA3;

########################################################################
########################################################################
##                                                                    ##
##               DERIVATION BOUNDARIES                                ##
##                                                                    ##
########################################################################
########################################################################


      #--------------------------------------------------------------------------------------------------#
      # 1. Spezialfall: letzte Verb IG: DB vor Aspekt, Tempus, falls vorhanden, sonst vor Personensuffix #
      # 2. Spezialfall: letzte IG as-Suffixe, DB vor slot 6 falls vorhanden, sonst slot 7                #
      #--------------------------------------------------------------------------------------------------#

      define IGverb1  [ "" <-  %["^DB"%] || "+Prog"%] _  ?* [%["Tns"%]|%["VPers"%]] ];
      define IGverb2  [ "" <-  %["^DB"%] || ["+NPst"|"+IPst"|"+Prog"]%] _  ?* %["VPers" ];
      define IGas1     [ "" <-  %["^DB"%] || ["+Top"|"+QTop"|"+Dub"]%] _  ];
      define IGas2     [ "" <-  %["^DB"%] || ["@MI"|"@SI"|"@CHA"] _  ];
define IGRules IGverb1 .o. IGverb2 .o. IGas1 .o. IGas2;


#################################################################################

      #######################
      #                     #
      # AMBIVALENTE SUFFIXE #
      #                     #
      #######################

      define AS=1 DB @re"as-1.regex" ;
      define AS=2 DB @re"as-2.regex" ;
      define AS=3 DB @re"as-3.regex" ;
      define AS=4 DB @re"as-4.regex" ;
      define AS=5 DB @re"as-5.regex" ;
      define AS=6 DB @re"as-6.regex" ;
      define AS=7 DB @re"as-7.regex" ;
      define HonAff DB @re"hon_aff.regex";
      define NtinWan DB @re"ntin-wan.regex";

      define AS [(HonAff) (AS=1) (HonAff) (AS=2) (AS=3)^{0,2} (HonAff) (AS=4) (HonAff) (AS=5) (AS=6) (AS=7)] ;


####################################################################################

       ##########
       #        #
       # VERBEN #
       #        #
       ##########

       define VRootQ @re"vroot-with-translations.regex" .o. QuechuaOrtho;
       define VRootES @re"vroot-es.regex" .o. SpanOrtho;
       define VRootTrans @re"vroot-trans-with-translations.regex" .o. QuechuaOrtho;  

       define VROOT [VRootQ|VRootES];

       define V=V=1 @re"v-v-1.regex" ;
       define V=V=2 @re"v-v-2.regex" ;
       define V=V=3 DB @re"v-v-3.regex" ;
       define V=V=4 DB @re"v-v-4.regex" ;
       define V=V=5 DB @re"v-v-5.regex" ;
       define V=V=6 DB @re"v-v-6.regex" ;
       define V=V=7 @re"v-v-7.regex" ;

    define VerbSuffixes  VerbRulesUpper  .o. [V=V=1^{0,4} (HonAff) V=V=2^{0,3} (HonAff) (V=V=1) (HonAff) (V=V=3) (HonAff) (V=V=4)(HonAff) (V=V=5) (HonAff) V=V=6 (V=V=7)]  .o. VerbRulesLower .o. QuechuaOrtho;


#####################################################################################

       #########
       #       #
       # NOMEN #
       #       #
       #########

       define NRootQ @re"nroot-with-translations.regex"  .o. QuechuaOrtho;
       define NRootES @re"nroot-es.regex" .o. SpanOrtho ;
       define NRootNUM  @re"nroot-num.regex"   .o. QuechuaOrtho;
       define NRootINDEF @re"nroot-indef-with-translations.regex" .o. QuechuaOrtho;
       define NRootCMP @re"nroot-cmp-with-translations.regex" .o. QuechuaOrtho;

       define NROOT [NRootQ|NRootES|NRootNUM|NRootINDEF];

       define N=N=1 @re"n-n-1.regex" ;
       define N=N=2 DB @re"n-n-2.regex" ;
       define N=N=3 DB @re"n-n-3.regex" ;
       define N=N=4 @re"n-n-4.regex" ;
       define N=N=5 DB @re"n-n-5.regex" ;
       define N=N=6 DB @re"n-n-6.regex" ;
       define N=N=7 DB @re"n-n-7.regex" ;
       define kamaDist [ "[" "^DB" "]" "[" "--" "]" {kama}  "[" "Cas" "]" "[" "+Dist" "]"] : {kama};

      define NounSuffixes PossessivPlural .o. [(N=N=1) (HonAff) N=N=2^{0,2} (HonAff) (kamaDist) (N=N=3) (HonAff) (N=N=4) (N=N=5)^{0,3} (HonAff) N=N=6^{0,3} N=N=7^{0,2} (HonAff)]  .o. QuechuaOrtho ;

######################################################################################

      ######################
      #                    #
      # DERIVIERTE WURZELN #
      #                    #
      ######################


       define NtoV @re"n-v.regex" ;
       define VtoN DB @re"v-n.regex" ; #mit diesen Suffixen nominalisierte Verben können nicht wieder verbalisiert werden
       define VtoNfinal DB @re"v-n-final.regex" ;
       define Relational [{n} "[" "NDeriv" "]""[" "+Rel" "]" ] : {n};
       define VerbalSuffixesBeforeNS  VerbRulesUpper .o. [V=V=1^{0,3} (HonAff) V=V=2^{0,3} (HonAff) (V=V=1) (HonAff) (V=V=3) (HonAff) (V=V=4) (HonAff)] .o. VerbRulesLower;

       #------------------------#
       # nominalisierte Verben: #
       # VRoot + VtoN = NDeriv1 #
       # "taki-qti", "taki-y"   #
       #------------------------#
       define NDeriv1 [VROOT  VerbalSuffixesBeforeNS VtoN];
       define NDeriv1final [VROOT  VerbalSuffixesBeforeNS VtoNfinal];

       #----------------------------#
       # verbalisierte Nomen:       #
       # NRoot + NtoV = VDeriv1     #
       # "wasi-n-cha-", "hatun-ya-" #
       # NzuV: -ykacha/kacha als    #
       # verbalisierndes Suffix     #
       #----------------------------#
       define VDeriv1 [NROOT (Relational) (HonAff) NtoV];

       #--------------------------------#
       # nominalisierte Verben Nr.2:    #
       # NRoot + NtoV + VtoN = NDeriv2  #
       # "wasi-n-cha-y", "hatun-ya-sqa" #
       #--------------------------------#
       define NDeriv2 [VDeriv1  VerbalSuffixesBeforeNS VtoN];
       define NDeriv2final [VDeriv1  VerbalSuffixesBeforeNS VtoNfinal];

       #--------------------------------#
       # verbalisierte Nomen Nr.2:      #
       # VRoot + VtoN + NtoV = VDeriv1  #
       # "yaku-naya-q"                  #
       #--------------------------------#
       define VDeriv2 [NDeriv1 NtoV];

       #-------------------------------------#
       # nominalisierte Verben Nr.3:         #
       # VRoot + VtoN + NtoV +VtoN = NDeriv3 #
       # "yuya-y-cha-ku-y"                   #
       #-------------------------------------#
       define NDeriv3 [VDeriv2  VerbalSuffixesBeforeNS VtoN];
       define NDeriv3final [VDeriv2  VerbalSuffixesBeforeNS VtoNfinal];

#define NDERIV [NDeriv1|NDeriv1final|NDeriv2|NDeriv2final|NDeriv3|NDeriv3final];
define NDERIV [NDeriv1|NDeriv2|NDeriv3];
define NDERIVFINAL [NDeriv1final|NDeriv2final|NDeriv3final];
define VDERIV [VDeriv|VDeriv1|VDeriv2];

       ###########################################
       #                                         #
       # Verben mit inkorporierter Nominalwurzel #
       #                                         #
       ###########################################
       define VRootInc [NRootQ VRootTrans];
       
       #--------------------------------------------------------#
       # nominalisiertes Verb mit inkorporierter Nominalwurzel: #
       # "uywamichiy"                                           #
       #--------------------------------------------------------#
       define NRootInc [VRootInc  VerbalSuffixesBeforeNS [VtoN|VtoNfinal]];

       #-------------#
       # Komposita   #
       #-------------#
       
       define Komposita [[NRootQ|NDeriv1] DB MB NRootCMP NounSuffixes];


#define NounConverb  [[NDERIVFINAL] (HonAff) (N=N=3) (NtinWan)] ;
define NounConverb  [[NDERIVFINAL] (HonAff) (N=N=3) (N=N=5) (N=N=6) (N=N=7)] ;
define NounNormal  [[NROOT|NDERIV|NRootInc|Komposita] NounSuffixes] ;
define Noun [NounConverb|NounNormal];
define Verb  [[VROOT|VDERIV|VRootInc] VerbSuffixes];


#########################################################################
#########################################################################

       ############
       #          #
       # PRONOMEN #
       #          #
       ############

       #------------------#
       # Personalpronomen #
       #------------------#
       define PrnPers @re"prnpers.regex";
       define PrnPersInfl [PrnPers  (HonAff) (N=N=1) (HonAff) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} (N=N=7)^{0,2}];

       #----------------------#
       # Demonstrativpronomen #
       #----------------------#
       define PrnDem @re"prndem.regex";
       define PrnDemInfl [PrnDem (HonAff) (AS=1) (HonAff) (AS=2) (N=N=1) (N=N=2) (N=N=3) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} N=N=7^{0,2}];

       #-----------------------#
       # Interrogativ-Pronomen #
       #-----------------------#
       define PrnInterrog @re"prninterrog.regex";
       define PrnInterrogInfl [PrnInterrog (N=N=1) (N=N=3) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} (N=N=7)^{0,2}];

define Prn [PrnPersInfl|PrnDemInfl|PrnInterrogInfl] .o. QuechuaOrtho;

#########################################################################

       #############
       #           #
       # PARTIKELN #
       #           #
       #############
       
       #---------------------------#
       # normale (nominale) und    #
       # verbalisierbare Partikeln #
       #---------------------------#
       define Partikel @re"particle.regex";
       define verbalisierbarePartikel @re"particle-verb.regex";

       define PartikelBasic [verbalisierbarePartikel (HonAff)(N=N=5)(HonAff)(N=N=6)^{0,2} (N=N=7)]; # zb. manantin

       #----------------------------#
       # verbalisierte Partikel     #
       # Partikel + NtoV = PartVerb #
       # hina-cha-                  #
       #----------------------------#
       define PartikelVerb [verbalisierbarePartikel NtoV] VerbSuffixes;

       #--------------------------------------#
       # nominalisiertes Partikelverb         #
       # Partikel-NtoV + VtoN = PartVerbNomen #
       # ama-cha-y                            #
       #--------------------------------------#
       define PartikelVerbNomen [verbalisierbarePartikel NtoV VerbalSuffixesBeforeNS [VtoN|VtoNfinal] (N=N=2) (N=N=3) (HonAff) (N=N=4) (N=N=5) (N=N=6)^{0,2} (N=N=7)];
     

define Partikeln VerbRulesLower .o. [[Partikel|PartikelBasic|PartikelVerb|PartikelVerbNomen]] .o. VerbRulesUpper .o. QuechuaOrtho;

#########################################################################

       #-------------#
       # Satzzeichen #
       #-------------#
       
       define Satzzeichen @re"satzzeichen.regex";

##################################################################################

       ##############
       # Buchstaben #
       ##############

       define Buchstaben @re"letra.regex";


#########################################################################

       
       ###########
       #         #
       # ZIFFERN #
       #         #
       ###########

       define Ziffern [1:1|2:2|3:3|4:4|5:5|6:6|7:7|8:8|9:9|%0:%0];
       #define Zahl "CARD" : Ziffern+;
       define Zahl  Ziffern+ "[" "CARD" "]" ;

       #---------------#
       # Ordinalzahlen #
       #---------------#
       define Ord @re"numord.regex";
       define Wortzahl NRootNUM+;
       define OrdZahl [(Zahl|Wortzahl) Ord];

    define Nummer [Zahl|OrdZahl|Wortzahl];


################################################################################

       ####################
       #                  #
       # SPANISCHE WÖRTER #
       #                  #
       ####################

       define Spanisch  @re"lexikon-sp.regex" .o. SpanOrtho .o. Gross .o. Klein;


  define SonderWort [Buchstaben|Satzzeichen|Nummer|Spanisch];

#################################################################################
       
       #########################
       #                       #
       # MERKMALSRESTRIKTIONEN #
       #                       #
       #########################

define NAYA1 [~$["+Obl"%] %["--"%] {ya} %["VS"%] %["+Trs"]] ; # -naya -> +Des, nicht +Obl+Trs
define NAYA2 [~$["+Reub"%] %["--"%] {ya} %["VS"%] %["+Trs"]] ;
define NAYA3 [~$["+Reub"%] %["--"%] {ya} %["VDeriv"%] %["+Aff"]];
define NAYA [NAYA1 .o. NAYA2 .o. NAYA3];

define SUN1 [~$["+2.Obj"?*"+3.Sg.Subj"]]; # -sun -> 1.Pl.Inkl.Fut/Imp, aber nicht 2.Obj,3.Subj
define SUN2 [~$["+Aug"%] %["^DB"%] %["--"%] {n} %["NPers"%] %["+3.Sg.Poss"]];
define SUN3 [~$["+Aug"%] %["^DB"%] %["--"%] {n} %["NPers"%] %["+DirE"]] ;
define SUN SUN1 .o. SUN2 .o. SUN3;

define SUNKI [~$["+2.Obj"?*"+2.Sg.Subj"]]; # -sunki -> nur als 2.Obj,3.Subj
define SUNCHIS [~$["+2.Obj"?*"+1.Pl.Incl.Subj"]];
define SUNCHIS2 [~$["+Aug"%] %["^DB"%] %["--"%] {nchi}[s|k|q] %["NPers"%] %["+1.Pl.Incl.Poss"]];
define WASUNCHIS [~$["+1.Obj"?*[{sunchis}|{nchis}]%["VPers"]]; 
define SUNKICHIS [~$["+2.Obj"?*"+2.Pl.Subj"]];
define SUNMAN [~$["+1.Pl.Incl.Subj.Imp"?*"+Pot"]];

define TAPI [~$["+Acc"?*"+Loc"]];
define PITA [~$["+Loc"?*"+Acc"]];
define MANTA  [~$["+Dat_Ill"?*"+Acc"]];
define TAMANTA [~$["+Acc"?*"+Abl"]];

define NYARI [~$["+Cont"?*"+Inch"]];
define QTI [~$["+Ag"?*"+Char"]] ;
define SQAMA  [~$["+3.Sg.Subj.IPst"?*"+DirE_Emph"]]; #-sqa-má -> nur als +Perf+DirE_Emph
define SQAN [~$["+3.Sg.Subj.IPst"?*"+DirE"]];
define RQAN [~$[%["+3.Sg.NPst"%] %["^DB"%] %["--"%]{n}%["Amb"%] %["+DirE"%]]];

define PAKU  [~$[%["+Rep"%] %["^DB"%] %["--"%]{ku}]];
define PAMU  [~$[%["+Rep"%] %["--"%]{mu}]];

define SQAY [~$["+IPst"?*["+2.Sg.Subj.Imp"|"+2.Pl.Subj.Imp"|"+1.Pl.Incl.Subj.Imp"|"+3.Sg.Subj.Imp"]]];
define SQAMAN [~$["+IPst"?*["+1.Sg.Subj.Pot"|"+Pot"]]];
define SQAFUT [~$[["+IPst"|"Tns_VPers"]?*["+3.Sg.Subj.Fut"]]];

define YMAN [~$["+2.Sg.Subj.Imp"?*"+Pot"]];
#define NKUMAN  [~$["+3.Pl.Subj"?*"+Pot"]]; #kommt vor in Gregorio -> nku -man als Potential anstatt -manku
define YKACHA [~$["+Inf"%] %["--"%] {kacha} %["VS"%] %["+Sml"]];

#define WAQ [~$["+1.Obj"%] %["^DB"%] %["--"%]{q}%["NS"%] %["+Ag"]]; #kommt vor
#define SAQ [~$["+Prog""+Ag"]]; #saq, falls -sa als Progressiv-Allomorph

define PAS [~$[{pa}%["Cas"%] %["+Gen"%] "@PA" %["^DB"%] %["--"%] [{si}|s] %["Amb"%] %["+IndE"]] ;
define PAQ [~$[{pa}%["Cas"%] %["+Gen"%] "@PA" %["^DB"%] %["--"%] {q} %["Cas"%] %["+Gen"]] ;

define NTIN [~$[{nti}%["Cas"%] %["+Iclsv"%] %["^DB"%] %["--"%] {n}]];
define STIN [~$[{sti}%["NS"%] %["+SS_Sim"%] %["^DB"%] %["--"%] {n}]]; # -stin, nicht als -sti -n (3.Sg.Subj, oder DirE)
define PTIN [~$[{pti}%["NS"%] %["+DS"%] "@PTI" %["^DB"%] %["--"%] {n} %["Amb"%] ]]; #-pti -> Ayacuchano, -n als DirE, nur Cusqueno
define YUQ  [~$[ "+yu+" %["VDeriv"%] %["+Aff"%] "@YKU" %["^DB"%] %["--"%]{q} %["NS"%]]];

define TAQ  [~$[{ta}%["Cas"%] %["+Acc"%] "@TA" %["^DB"%] %["--"%] {q}%["Cas"%]]];

define DISC [~$[%["Part+Disc"%] %["^DB"%] %["--"%] {ña} ]]; #ñaña = schwester, nicht 2mal +Disc
#define tripleGEN [~$["+Gen""@PA""+Gen""@PA""+Gen""@PA"]];

define NTAWAN [~$[%["+Proloc"%] %["^DB"%] %["--"%] {wan}]];
define ASWAN [~$["=poco"%] %["^DB"%] %["--"%] {wan}]];
#Spezialfall, aswan als Ganzes im Lexikon, da sonst Probleme mit Suffixabfolge, vgl. as-wan-ta!

define ALLIN [~$[{alli} %["NRoot"%] %["=bueno"%] "@ALLI" %["^DB"%] %["--"%] {n} [%["NPers"|%["Amb"]]];
#Spezialfall, da sowohl allin als auch alli als Wurzel vorkommen!

define NAWPA [~$["@NAWPA" %["^DB"%] %["--"%] q %[ ]]; #ñawpaq nicht als ñawpa+q (+Gen)
define CHIQA  [~$["@CHIQA" %["^DB"%] %["--"%] [q|n|p] %[]];
define YANA  [~$["@YANA" %["--"%] {pa} %[]];

define HATUN1 [~$[{hatu} %["NRoot"%] %["=grande"%] %["^DB"%] %["--"%] {n} [%["NPers"|%["Amb"]]];
define HATUN2 [~$[{hatu} %["NRoot"%] %["=grande"%] %["--"%]{cha} %["NDeriv"%]]]; #hatu+Dim
define HATUN3 [~$[{hatu} %["NRoot"%] %["=grande"%] %["--"%]{cha}%["VS"%]]];
define HATUN HATUN1 .o. HATUN2 .o. HATUN3 ;
#Spezialfall, da sowohl hatun als auch hatu als Wurzel vorkommen, und hatucha=abuela, fuer Verbalisierung nur hatun-cha-

# kacha- soll nicht als ka (copula) -cha (Vdim) erkannt werden! ka[=ser][--]cha[VDeriv][+Vdim]
define KACHA [~$[ {ka}%["VRoot"%] %["=ser"%] %["--"%] {cha}]];

# forbid -llalla analized as +Lim+Lim -> if a word contains a sequence -llalla, the first -lla is probably part of the root
# consider chukllalla -> good analysis: chuklla(=choza)-lla(+Lim), bad analysis: chuk(=silencio)-lla(+Lim)-lla(+Lim)
define LLALLA [~$[%["+Lim_Aff"%] %["^DB"%] %["--"%] {lla}]];

define SIPAS [~$[ [S|s]i %["Part_Cond"%] %["^DB"%] %["--"%] {pas}]];

define PACHAMAMA [~$[ {pacha}%["NRoot" ?* {mama}%["NRoot" ]];

define GENACC [~$[{q}"@PA"{ta}"@TA"]]; # nach Genitiv-Regel anwenden!

define FeatRestr [NAYA .o. SUN .o. SUNKI .o. SUNCHIS .o. WASUNCHIS .o. SUNCHIS2 .o. SUNKICHIS .o. SUNMAN .o. TAPI .o. PITA .o. MANTA .o. NYARI .o.QTI .o. SQAN .o. RQAN .o. SQAMA .o. YMAN .o. TAMANTA .o. YKACHA .o. PAS .o. PAQ .o. NTIN .o. STIN .o. PTIN .o. YUQ .o. TAQ .o. DISC .o. NTAWAN .o. ASWAN .o. HATUN .o. KACHA .o. ALLIN .o. NAWPA .o. CHIQA .o. YANA .o. SQAY .o. SQAMAN .o. PAKU .o. PAMU .o. SQAFUT .o. SIPAS .o. LLALLA .o. PACHAMAMA];

######################################################################################

# einzige unregelmaessige Verbform: haku - komm!

define HAKU  [{haku} "[" "VRoot" "+2.Sg.Subj.Imp" "]" "[" "=venir" "]"] : {haku};

######################################################################################

#define Wort [[Noun|Verb|Prn|Partikeln|HAKU] (AS)] .o. NounRules .o. GENACC .o. Gross;
define Wort IGRules .o. [[Noun|Verb|Prn|Partikeln|HAKU] (AS)] .o. NounRules .o. GENACC .o. AmbiRules .o. Gross;

define Wort2  FeatRestr .o. Cleanup2 .o. [Wort|SonderWort] .o. Allophone .o. Cleanup1 ;
read regex removeDB .o. Wort2;

save stack quechua-web.fst
