# set char-encoding utf-8
# -*- encoding: utf-8 -*-

       #-------------------------------#
       # Delete all flag on both sides #
       #-------------------------------#
       define Cleanup1 [["@MU"|"@PU"|"@KU"|"@YSI"|"@RI"|"@MPA"|"@CHI"|"@RQU"|"@MI"|"@SI"|"@CHA"|"@Vdim"|"@YKU"|"@YU"|"@PTI"|"@STI"|"@PA"|"@TA"|"@AS"|"@ALLI"|"@HATU"|"@POSS"|"@POSSni"|"+ku+"|"+yku+"|"+yu+"|"+rqu+"|"+ru+"|"+pu+"|"+mu+"|%["CARD"%]|"+nn"|"@PLYUQ"|"@NAWPA"|"@CHIQA"|"@YANA"] -> ""];
       define Cleanup2 ["" <- ["@MU"|"@PU"|"@KU"|"@YSI"|"@MPA"|"@RI"|"@CHI"|"@RQU"|"@MI"|"@SI"|"@CHA"|"@Vdim"|"@YKU"|"@YU"|"@PTI"|"@STI"|"@PA"|"@TA"|"@AS"|"@ALLI"|"@HATU"|"@POSS"|"@POSSni"|"+ku+"|"+yku+"|"+yu+"|"+rqu+"|"+ru+"|"+pu+"|"+mu+"|"+nn"|"@NAWPA"|"@CHIQA"|"@YANA"] ];

############################################################################### 

          #########################
          #                       #
          # PHONETIC VARIATIONS   #
          #                       #
          #########################

      define Vowel [a|e|i|o|u|á|é|í|ó|ú|A|E|I|O|U|Á|É|Í|Ó|Ú];
      define Cons [b|c|d|f|g|h|j|k|l|m|n|ñ|p|q|r|s|t|v|w|y|z|'];

      #--------------------------#
      # allow uppercase letters  #
      #--------------------------#

      define LowerCase [A (->) a, B (->) b, C (->) c,D (->) d,E (->) e,F (->) f,G (->) g,H (->) h,I (->) i,J (->) j,K (->) k,L (->) l,M (->) m,N (->) n,O (->) o,P (->) p,Q (->) q,R (->) r,S (->) s,T (->) t,U (->) u,V (->) v,W (->) w,X (->) x,Y (->) y,Z (->) z,Ñ (->) ñ];

      define UpperCase [ a (->) A,b (->) B,c (->) C,d (->) D,e (->) E,f (->) F,g (->) G,h (->) H,i (->) I,j (->) J,k (->) K,l (->) L,m (->) M,n (->) N,o (->) O,p (->) P,q (->) Q,r (->) R,s (->) S,t (->) T,u (->) U,v (->) V,w (->) W,x (->) X,y (->) Y,z (->) Z,ñ (->) Ñ];


      #-------------------------------------------------------------------#
      # Ersetze optional u durch o und i durch e, falls in Umgebung von q #
      #-------------------------------------------------------------------#

      define Allophone1 [ u (->) o||  _ ?* q, q ?* _  , _  ?* {cc}, {cc} ?* _ ] .o. [i (->) e || _ ?* q, q ?* _ , _ ?* {cc}, {cc} ?* _  ];

      
      # apply only to roots, not to suffixes!
      #define Allophone2 [ m (->) n || _ p];
      define Allophone2 [ m (->) n ||  _ p ];
      define Allophone3 [ {ll} (->) l || _ q];

      define Allophone [ Allophone2 .o. Allophone3] ;

       #---------------------------#
       # alternative orthographies #
       #---------------------------#

       define Orthography1 [ {q} (->) {cc}, {Q} (->) {Cc}];
       define Orthography2 [ {wi} (->) {hui}, {Wi} (->) {Hui}  ];
       define Orthography3 [ {wa} (->) {hua}, {Wa} (->) {Hua} ];
       define Orthography4 [ {wa} (->) {gua}, {Wa} (->) {Gua}];
       define Orthography5 [ {w} (->) {u} || {a}_ ];
       define Orthography6 [ {h} (->) {j}, {H} (->) {J} ];
       define Orthography7 [ {k} (->) {j} || Vowel_];
       define Orthography8 [ {ch} (->) {ts}, {Ch} (->) {Ts} ];
       define Orthography9 [ {ph} (->) {f}];
       define Orthography10 [ {w} (->) {u} || Vowel _ ];
       define Orthography11 [ {q} (->) {j} || Vowel_];
       
       
       define Orthography [Orthography1 .o. Orthography2 .o. Orthography3 .o. Orthography4 .o. Orthography5 .o.  Orthography6 .o. Orthography7 .o. Orthography8 .o. Orthography9 .o. Orthography10 .o. Orthography11];

       define QuechuaOrtho Allophone1 .o. Orthography;

       # apply after Cleanup
       define Accent [ a (->) á, u (->) ú , i (->) í, e (->) é, o (->) ó];
       

########################################################################
########################################################################
##                                                                    ##
##               MORPHOPHONOLOGICAL RULES                             ##
##                                                                    ##
########################################################################
########################################################################

      ###########
      # NOMINAL #
      ###########


       #------------------------------------------------------------#
       # Genitive -pa after Konsonant, -q/-p after Vowel (optional) #
       #------------------------------------------------------------#
      # define GENITIV [ {pa}"@PA" (->) [{p}|{q}]"@PA"  ||Vowel  _ ];
	define PA1 [  {q}"@PA"  => Vowel _  ];
	define PA2 [  {p}"@PA"  => Vowel _  ];
	#define PA3 [  {pa}"@PA" => Cons _  ];
      define GENITIV PA1 .o. PA2 ;

       #--------------------------------------------------------#
       # Possessive forms need euphon. -ni/-ñi after Consonants #
       #--------------------------------------------------------#

        #define POSSESSIV1 [ {@POSS} -> [{ni}|{ñi}]  || Cons _ ];
        #define POSSESSIV2 [ {@POSS} ->  "" || Vowel _ ];
	#define POSSESSIV POSSESSIV1 .o. POSSESSIV2;

	define POSS1 [ "@POSS"  => Vowel _  ];
	define POSS2 [ "@POSSni" => Cons _  ];

      define POSSESSIV POSS1 .o. POSS2;

       define NounRules GENITIV .o. POSSESSIV;


       ##############
       # AMBIVALENT #
       ##############

       #--------------------------------------------------------------------------------------------------------------#
       # evidential suffixes mi,si,cha as -m,-s,-ch only after vowel. Apply rule to complete word form, after cleanup #
       # of flags, otherwise the context might not be right                                                           #
       #--------------------------------------------------------------------------------------------------------------#

       #define EVID1 [ {mi}"@MI" -> [{m}|{n}]"@MI"  ||Vowel  _ ];
       #define EVID2 [ {si}"@SI" -> {s}"@SIu" || Vowel  _ ];
       #define EVID3 [ {chi}"@CHA" -> {ch}"@CHA" || Vowel  _ ];
       #define EVID4 [ {cha}"@CHA" -> {ch}"@CHA" || Vowel  _ ];

	define SI1 [  {s}"@SI"  => Vowel _  ];
	define SI2 [  {si}"@SI" => Cons _  ];

	define MI1 [  {m}"@MI"  => Vowel _  ];
	#define MI2 [  {n}"@MI"  => Vowel _  ];
	define MI3 [  {mi}"@MI" => Cons _  ];

	define CHA1 [  {ch}"@CHA"  => Vowel _  ];
	define CHA2 [  {chi}"@CHA"  => Cons _  ];
	define CHA3 [  {cha}"@CHA" => Cons _  ];

       #define AmbiRules EVID1 .o. EVID2 .o. EVID3 .o. EVID4;
	define AmbiRules SI1 .o. SI2 .o. MI1  .o. MI3 .o. CHA1 .o. CHA2 .o. CHA3;


#################################################################################

      #######################
      #                     #
      # AMBIVALENT SUFFIXES #
      #                     #
      #######################

      define AS=1  @re"as-1.regex" ;
      define AS=2  @re"as-2.regex" ;
      define AS=3  @re"as-3.regex" ;
      define AS=4  @re"as-4.regex" ;
      define AS=5  @re"as-5.regex" ;
      define AS=6  @re"as-6.regex" ;
      define AS=7  @re"as-7.regex" ;
      define HonAff  @re"hon_aff.regex";

      define AS [(HonAff) (AS=1) (HonAff) (AS=2) (AS=3)^{0,2} (HonAff) (AS=4) (HonAff) (AS=5) (AS=6) (AS=7)] ;


####################################################################################

       ##########
       #        #
       # VERBS  #
       #        #
       ##########

       define VROOT @re"vroot.regex" .o. Allophone;
       define VRootTrans @re"vroot.regex" .o. Allophone;


       define V=V=1 @re"v-v-1.regex" ;
       define V=V=2 @re"v-v-2.regex" ;
       define V=V=3  @re"v-v-3.regex" ;
       define V=V=4  @re"v-v-4.regex" ;
       define V=V=5  @re"v-v-5.regex" ;
       define V=V=6  @re"v-v-6.regex" ;
       define V=V=7 @re"v-v-7.regex" ;

   # define VerbSuffixes  VerbRulesUpper  .o. [V=V=1^{0,4} (HonAff) V=V=2^{0,3} (HonAff) (V=V=1) (HonAff) (V=V=3) (HonAff) (V=V=4)(HonAff) (V=V=5) (HonAff) V=V=6 (V=V=7)]  .o. VerbRulesLower .o. QuechuaOrtho;
    define VerbSuffixes [V=V=1^{0,4} (HonAff) V=V=2^{0,3} (HonAff) (V=V=1) (HonAff) (V=V=3) (HonAff) (V=V=4)(HonAff) (V=V=5) (HonAff) V=V=6 (V=V=7)];


#####################################################################################

       #########
       #       #
       # NOUNS #
       #       #
       #########

       define NRootQ @re"nroot.regex"  ;

       define NRootNUM  @re"nroot-num.regex"  ;
       define NRootINDEF @re"nroot-indef-with-translations.regex" ;
       define NRootCMP @re"nroot.regex" .o. Allophone;
       
       define NROOT [NRootQ|NRootNUM|NRootINDEF] .o. Allophone;

       define N=N=1 @re"n-n-1.regex" ;
       define N=N=2  @re"n-n-2.regex" ;
       define N=N=3  @re"n-n-3.regex" ;
       define N=N=4 @re"n-n-4.regex" ;
       define N=N=5  @re"n-n-5.regex" ;
       define N=N=6  @re"n-n-6.regex" ;
       define N=N=7  @re"n-n-7.regex" ;
       define kamaDist  {kama} : {kama};

      define NounSuffixes [(N=N=1) (HonAff) N=N=2^{0,2} (HonAff) (kamaDist) (N=N=3) (HonAff) (N=N=4) (N=N=5)^{0,3} (HonAff) N=N=6^{0,3} N=N=7^{0,2} (HonAff)] ;

######################################################################################

      ######################
      #                    #
      # DERIVED ROOTS      #
      #                    #
      ######################


       define NtoV @re"n-v.regex" ;
       define VtoN  @re"v-n.regex" ; #mit diesen Suffixen nominalisierte Verben können nicht wieder verbalisiert werden
       define VtoNfinal  @re"v-n-final.regex" ;
       define Relational {n} : {n};
       define VerbalSuffixesBeforeNS   [V=V=1^{0,3} (HonAff) V=V=2^{0,3} (HonAff) (V=V=1) (HonAff) (V=V=3) (HonAff) (V=V=4) (HonAff)] ;

       #------------------------#
       # nominalized verbs:     #
       # VRoot + VtoN = NDeriv1 #
       # "taki-qti", "taki-y"   #
       #------------------------#
       define NDeriv1 [VROOT  VerbalSuffixesBeforeNS VtoN];
       define NDeriv1final [VROOT  VerbalSuffixesBeforeNS VtoNfinal];

       #----------------------------#
       # verbalized nouns:          #
       # NRoot + NtoV = VDeriv1     #
       # "wasi-n-cha-", "hatun-ya-" #
       # NtoV: -ykacha/kacha as     #
       # verbalizing suffix         #
       #----------------------------#
       define VDeriv1 [NROOT (Relational) (HonAff) NtoV];

       #--------------------------------#
       # nominalized verb Nr.2:         #
       # NRoot + NtoV + VtoN = NDeriv2  #
       # "wasi-n-cha-y", "hatun-ya-sqa" #
       #--------------------------------#
       define NDeriv2 [VDeriv1  VerbalSuffixesBeforeNS VtoN];
       define NDeriv2final [VDeriv1  VerbalSuffixesBeforeNS VtoNfinal];

       #--------------------------------#
       # verbalized noun Nr.2:          #
       # VRoot + VtoN + NtoV = VDeriv1  #
       # "yaku-naya-q"                  #
       #--------------------------------#
       define VDeriv2 [NDeriv1 NtoV];

       #-------------------------------------#
       # nominalized verbs Nr.3:             #
       # VRoot + VtoN + NtoV +VtoN = NDeriv3 #
       # "yuya-y-cha-ku-y"                   #
       #-------------------------------------#
       define NDeriv3 [VDeriv2  VerbalSuffixesBeforeNS VtoN];
       define NDeriv3final [VDeriv2  VerbalSuffixesBeforeNS VtoNfinal];

#define NDERIV [NDeriv1|NDeriv1final|NDeriv2|NDeriv2final|NDeriv3|NDeriv3final];
define NDERIV [NDeriv1|NDeriv2|NDeriv3];
define NDERIVFINAL [NDeriv1final|NDeriv2final|NDeriv3final];
define VDERIV [VDeriv|VDeriv1|VDeriv2];

       ###########################################
       #                                         #
       # verbs with incorporated nominal root    #
       #                                         #
       ###########################################
       define VRootInc [NRootQ VRootTrans];
       
       #--------------------------------------------------------#
       # nominalized verb with incorporated nominal root:       #
       # "uywamichiy"                                           #
       #--------------------------------------------------------#
       define NRootInc [VRootInc  VerbalSuffixesBeforeNS [VtoN|VtoNfinal]];

       #--------------------#
       # nominal compounds  #
       #--------------------#
       
       define Compounds [[NRootQ|NDeriv1]  MB NRootCMP NounSuffixes];


#define NounConverb  [[NDERIVFINAL] (HonAff) (N=N=3) (NtinWan)] ;
define NounConverb  [[NDERIVFINAL] (HonAff) (N=N=3) (N=N=5) (N=N=6) (N=N=7)] ;
define NounNormal  [[NROOT|NDERIV|NRootInc|Compounds] NounSuffixes] ;
define Noun [NounConverb|NounNormal];
define Verb  [[VROOT|VDERIV|VRootInc] VerbSuffixes];


#########################################################################
#########################################################################

       ############
       #          #
       # PRONOUNS #
       #          #
       ############

       #-------------------#
       # personal pronouns #
       #-------------------#
       define PrnPers @re"prnpers.regex" .o. Allophone;
       define PrnPersInfl [PrnPers  (HonAff) (N=N=1) (HonAff) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} (N=N=7)^{0,2}];

       #------------------------#
       # demonstrative pronouns #
       #------------------------#
       define PrnDem @re"prndem.regex";
       define PrnDemInfl [PrnDem (HonAff) (AS=1) (HonAff) (AS=2) (N=N=1) (N=N=2) (N=N=3) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} N=N=7^{0,2}];

       #------------------------#
       # interrogative pronouns #
       #------------------------#
       define PrnInterrog @re"prninterrog.regex";
       define PrnInterrogInfl [PrnInterrog (N=N=1) (N=N=3) (N=N=4) (N=N=5)^{0,2} (HonAff) (N=N=6)^{0,2} (N=N=7)^{0,2}];

define Prn [PrnPersInfl|PrnDemInfl|PrnInterrogInfl] ;

#########################################################################

       #############
       #           #
       # PARTICLES #
       #           #
       #############
       
       #---------------------------#
       # normal (nominal) and      #
       # verbalizable particles    #
       #---------------------------#
       define Particle @re"particle.regex" .o. Allophone;
       define verbalizableParticle @re"particle-verb.regex" .o. Allophone;

       define ParticleBasic [verbalizableParticle (HonAff)(N=N=5)(HonAff)(N=N=6)^{0,2} (N=N=7)]; # zb. manantin

       #----------------------------#
       # verbalized particles       #
       # particle + NtoV = PartVerb #
       # hina-cha-                  #
       #----------------------------#
       define ParticleVerb [verbalizableParticle NtoV] VerbSuffixes;

       #--------------------------------------#
       # nominalized PartVerb                 #
       # Particle-NtoV + VtoN = PartVerbNoun #
       # ama-cha-y                            #
       #--------------------------------------#
       define ParticleVerbNoun [verbalizableParticle NtoV VerbalSuffixesBeforeNS [VtoN|VtoNfinal] (N=N=2) (N=N=3) (HonAff) (N=N=4) (N=N=5) (N=N=6)^{0,2} (N=N=7)];
     

define Particles [[Particle|ParticleBasic|ParticleVerb|ParticleVerbNoun]] ;

#########################################################################

       #-------------#
       # Punctuation #
       #-------------#
       
       define Punctuation @re"satzzeichen.regex";

##################################################################################

       ##############
       #  Letters   #
       ##############

       define Letters @re"letra.regex";


#########################################################################

       
       ###########
       #         #
       # NUMBERS #
       #         #
       ###########

       define Digits [1:1|2:2|3:3|4:4|5:5|6:6|7:7|8:8|9:9|%0:%0];
       define Nbr  Digits+ ;

       #-----------------#
       # Ordinal numbers #
       #-----------------#
       define Ord @re"numord.regex" .o. Allophone;
       define WordNbr NRootNUM+;
       define OrdNbr [(Nbr|WordNbr) Ord];

    define Number [Nbr|OrdNbr|WordNbr];


################################################################################

  define SpecialWord [Letters|Punctuation|Number];
  
  
  define QTI [~$[q"AMBIGUO"{ti}]];
  define PAQ [~$[{paq}"AMBIGUO"]];
  define YUQ [~$[{yuq}"AMBIGUO"]];
  define TAQ [~$[{taq}"AMBIGUO"]];
  define TAP [~$[{tap}"AMBIGUO"]];
  define CHUSAQ [~$[{ch'usap}"AMBIGUO"]];
  define NAWPAQ [~$[{ñawpap}"AMBIGUO"]];
  define ALLIN [~$[{allim}"AMBIGUO"]];
  define GENACC [~$[p"AMBIGUO"{ta}]];
  define WAN [~$[{wam}"AMBIGUO"]];
  
  define FeatRestr [QTI .o. PAQ .o. YUQ .o. TAQ .o. TAP .o. CHUSAQ .o. NAWPAQ .o. ALLIN .o. GENACC .o. WAN];

######################################################################################

# the only irregular verb form: haku - come!

define HAKU  {haku} : {haku};

######################################################################################

define Wort  [[Noun|Verb|Prn|Particles|HAKU] (AS)] .o. NounRules .o. AmbiRules .o. UpperCase;
read regex FeatRestr .o. Cleanup2 .o. [Wort|SpecialWord] .o. Allophone .o. QuechuaOrtho  .o. Accent .o. Cleanup1 ;
#define Wort2  [Wort|SpecialWord] .o. Allophone  ;

save stack normalizer.fst
